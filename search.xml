<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/07/28/ui-record/"/>
      <url>/2023/07/28/ui-record/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">---title: 素材记录date: 2019-04-18 16:09:41categories: 设计tags: [UI]---<h1 id="素材收藏"><a href="#素材收藏" class="headerlink" title="素材收藏"></a>素材收藏</h1><p>##pixabay - <a href="https://pixabay.com/">https://pixabay.com/</a></p><p>全球最大的免费图片站，支持中文搜索！</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2019-04-19-081313.png"></p><h2 id="trianglify-enerator-https-trianglify-io"><a href="#trianglify-enerator-https-trianglify-io" class="headerlink" title="trianglify-enerator - https://trianglify.io/"></a>trianglify-enerator - <a href="https://trianglify.io/">https://trianglify.io/</a></h2><p>免费背景生成器</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2019-04-19-081541.png"></p><h2 id="easyicon-https-www-easyicon-net"><a href="#easyicon-https-www-easyicon-net" class="headerlink" title="easyicon - https://www.easyicon.net/"></a>easyicon - <a href="https://www.easyicon.net/">https://www.easyicon.net/</a></h2><p>图标合集</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2019-04-19-081633.png"></p><h2 id="psdrepo-https-psdrepo-com"><a href="#psdrepo-https-psdrepo-com" class="headerlink" title="psdrepo- https://psdrepo.com/"></a>psdrepo- <a href="https://psdrepo.com/">https://psdrepo.com/</a></h2><p>psd素材站</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2019-04-19-081722.png"></p><h2 id="markmaker-http-emblemmatic-org"><a href="#markmaker-http-emblemmatic-org" class="headerlink" title="markmaker - http://emblemmatic.org/"></a>markmaker - <a href="http://emblemmatic.org/">http://emblemmatic.org/</a></h2><p>在线生成logo</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2019-04-19-081918.png"></p><h2 id="flatinspire-http-flatinspire-com"><a href="#flatinspire-http-flatinspire-com" class="headerlink" title="flatinspire-http://flatinspire.com/"></a>flatinspire-<a href="http://flatinspire.com/">http://flatinspire.com/</a></h2><p>扁平化设计</p><p>可参考配色</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2019-04-19-082033.png" alt="image-20190419162032693"></p><h2 id="http-colours-neilorangepeel-com"><a href="#http-colours-neilorangepeel-com" class="headerlink" title="http://colours.neilorangepeel.com/"></a><a href="http://colours.neilorangepeel.com/">http://colours.neilorangepeel.com/</a></h2><p>随机颜色，找灵感</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2019-04-19-082248.png"></p><h2 id="私藏字体-http-sicangziti-com"><a href="#私藏字体-http-sicangziti-com" class="headerlink" title="私藏字体 -http://sicangziti.com/"></a>私藏字体 -<a href="http://sicangziti.com/">http://sicangziti.com/</a></h2><p>字体下载</p><h2 id="https-unsplash-com"><a href="#https-unsplash-com" class="headerlink" title="https://unsplash.com/"></a><a href="https://unsplash.com/">https://unsplash.com/</a></h2><p>图片</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 更改主题后启动服务器报错</title>
      <link href="/2023/07/28/Hexo-start-error/"/>
      <url>/2023/07/28/Hexo-start-error/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>Hexo 更改主题后启动服务器，界面显如下字符:<br><code>extends includes/layout.pug block content include includes/recent-posts.pug include includes/pagination.pug</code></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure><p>清除缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字体文件Nginx跨域问题</title>
      <link href="/2020/03/23/Q-font/"/>
      <url>/2020/03/23/Q-font/</url>
      
        <content type="html"><![CDATA[<h1 id="字体文件Nginx跨域问题"><a href="#字体文件Nginx跨域问题" class="headerlink" title="字体文件Nginx跨域问题"></a>字体文件Nginx跨域问题</h1><h2 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h2><p><img src="http://kim.jtsmart-ai.com/mdpic/2020-03-23-073503.png"></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p><strong>nginx</strong>在配置中对应的location下添加上如下的设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add_header <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">add_header <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;</span><br></pre></td></tr></table></figure><p>之后重启Nginx</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> 字体 </tag>
            
            <tag> font </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云安装oracle</title>
      <link href="/2019/01/03/oracle-centos-install/"/>
      <url>/2019/01/03/oracle-centos-install/</url>
      
        <content type="html"><![CDATA[<h1 id="阿里云安装oracle"><a href="#阿里云安装oracle" class="headerlink" title="阿里云安装oracle"></a>阿里云安装oracle</h1><h2 id="阿里云挂载盘"><a href="#阿里云挂载盘" class="headerlink" title="阿里云挂载盘"></a>阿里云挂载盘</h2><blockquote><p>因有数据盘，所以想把oracl安装在数据盘内。这样容量比较大。</p></blockquote><h3 id="检查阿里云服务器数据盘情况"><a href="#检查阿里云服务器数据盘情况" class="headerlink" title="检查阿里云服务器数据盘情况"></a>检查阿里云服务器数据盘情况</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ fdisk -l <span class="comment">#检查当前VPS的数据硬盘情况</span></span><br></pre></td></tr></table></figure><p><img src="http://kim.jtsmart-ai.com/mdpic/2019-01-03-063813.png" alt="image-20190103143813663"></p><p>可以看到1073G的数据盘没有挂载。</p><h3 id="挂载阿里云数据硬盘"><a href="#挂载阿里云数据硬盘" class="headerlink" title="挂载阿里云数据硬盘"></a>挂载阿里云数据硬盘</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ fdisk /dev/vdb </span><br><span class="line"><span class="comment">#然后提示，输入n，p，1，回车，回车，wq，保存退出。</span></span><br></pre></td></tr></table></figure><p>完成之后，输入<code>fdisk -l</code> ，正常可以看到已经被分区。</p><h3 id="格式化分区以及挂载目录"><a href="#格式化分区以及挂载目录" class="headerlink" title="格式化分区以及挂载目录"></a>格式化分区以及挂载目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式化挂载数据硬盘分区</span></span><br><span class="line">$ mkfs.ext4 /dev/vdb1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加开机自动挂载</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;/dev/vdb1  /data ext4    defaults    0  0&#x27;</span> &gt;&gt; /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行mount挂载</span></span><br><span class="line">$ mount /dev/vdb1 /data</span><br></pre></td></tr></table></figure><h3 id="查看分区"><a href="#查看分区" class="headerlink" title="查看分区"></a>查看分区</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">df</span> - h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">$ <span class="built_in">df</span> -Th /data</span><br></pre></td></tr></table></figure><p><img src="http://kim.jtsmart-ai.com/mdpic/2019-01-03-064939.png" alt="image-20190103144939053"></p><p><img src="http://kim.jtsmart-ai.com/mdpic/2019-01-03-065118.png" alt="image-20190103145117962"></p><h2 id="操作文档-Oracle-11g-CentOS7环境-静默安装"><a href="#操作文档-Oracle-11g-CentOS7环境-静默安装" class="headerlink" title="操作文档 Oracle 11g (CentOS7环境) 静默安装"></a>操作文档 Oracle 11g (CentOS7环境) 静默安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######################################################################</span></span><br><span class="line"><span class="comment">#                                                                    #</span></span><br><span class="line"><span class="comment">#                                                                    #</span></span><br><span class="line"><span class="comment">#               准备工作：检查服务器                                    #</span></span><br><span class="line"><span class="comment">#                                                                    #</span></span><br><span class="line"><span class="comment">#                                                                    #</span></span><br><span class="line"><span class="comment">######################################################################</span></span><br><span class="line"><span class="comment">#----------------------------     检查系统   ---------------------------------------------</span></span><br><span class="line">[root@vpn ~]<span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">CentOS Linux release 7.2.1511 (Core) </span><br><span class="line"></span><br><span class="line">[root@vpn ~]<span class="comment"># uname -r</span></span><br><span class="line">3.10.0-514.6.2.el7.x86_64</span><br><span class="line"></span><br><span class="line">[root@vpn ~]<span class="comment"># cat /proc/version</span></span><br><span class="line">Linux version 3.10.0-514.6.2.el7.x86_64 (builder@kbuilder.dev.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-11) (GCC) ) <span class="comment">#1 SMP </span></span><br><span class="line"></span><br><span class="line">Thu Feb 23 03:04:39 UTC 2017</span><br><span class="line"><span class="comment">#----------------------------     检查CPU   ---------------------------------------------</span></span><br><span class="line">[root@vpn ~]<span class="comment"># cat /proc/version</span></span><br><span class="line">processor    : 3</span><br><span class="line">vendor_id    : GenuineIntel</span><br><span class="line">cpu family    : 6</span><br><span class="line">model        : 63</span><br><span class="line">model name    : Intel(R) Xeon(R) CPU E5-2680 v3 @ 2.50GHz</span><br><span class="line">stepping    : 2</span><br><span class="line">microcode    : 0x1</span><br><span class="line">cpu MHz        : 2494.224</span><br><span class="line">cache size    : 30720 KB</span><br><span class="line">physical <span class="built_in">id</span>    : 0</span><br><span class="line">siblings    : 4</span><br><span class="line">core <span class="built_in">id</span>        : 3</span><br><span class="line">cpu cores    : 4</span><br><span class="line">apicid        : 3</span><br><span class="line">initial apicid    : 3</span><br><span class="line">fpu        : <span class="built_in">yes</span></span><br><span class="line">fpu_exception    : <span class="built_in">yes</span></span><br><span class="line">cpuid level    : 13</span><br><span class="line">wp        : <span class="built_in">yes</span></span><br><span class="line">flags        : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx </span><br><span class="line"></span><br><span class="line">pdpe1gb rdtscp lm constant_tsc rep_good nopl eagerfpu pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt </span><br><span class="line"></span><br><span class="line">tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm fsgsbase bmi1 avx2 smep bmi2 erms invpcid xsaveopt</span><br><span class="line">bogomips    : 4988.44</span><br><span class="line">clflush size    : 64</span><br><span class="line">cache_alignment    : 64</span><br><span class="line">address sizes    : 46 bits physical, 48 bits virtual</span><br><span class="line">power management:</span><br><span class="line"><span class="comment">#----------------------------     检查内存   ---------------------------------------------</span></span><br><span class="line">[root@vpn ~]<span class="comment"># free -g</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:              7           0           6           0           0           7</span><br><span class="line">Swap:             0           0           0</span><br><span class="line"><span class="comment">#----------------------------     检查硬盘   ---------------------------------------------</span></span><br><span class="line">[root@vpn ~]<span class="comment"># df -Th</span></span><br><span class="line">Filesystem     Type      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/vda1      ext3       40G  1.7G   36G   5% /</span><br><span class="line">devtmpfs       devtmpfs  3.9G     0  3.9G   0% /dev</span><br><span class="line">tmpfs          tmpfs     3.9G     0  3.9G   0% /dev/shm</span><br><span class="line">tmpfs          tmpfs     3.9G  328K  3.9G   1% /run</span><br><span class="line">tmpfs          tmpfs     3.9G     0  3.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/vdb       ext4       99G   61M   94G   1% /data</span><br><span class="line">tmpfs          tmpfs     783M     0  783M   0% /run/user/0</span><br><span class="line"></span><br><span class="line"><span class="comment">#----------------------------     检查主机名   ---------------------------------------------</span></span><br><span class="line">[root@vpn ~]<span class="comment"># hostname</span></span><br><span class="line">vpn</span><br><span class="line"></span><br><span class="line"><span class="comment">######################################################################</span></span><br><span class="line"><span class="comment">#                                                                    #</span></span><br><span class="line"><span class="comment">#                                                                    #</span></span><br><span class="line"><span class="comment">#               准备工作：检查yum仓库、安装依赖包                         #</span></span><br><span class="line"><span class="comment">#                                                                    #</span></span><br><span class="line"><span class="comment">#                                                                    #</span></span><br><span class="line"><span class="comment">######################################################################</span></span><br><span class="line"><span class="comment">#安装依赖包</span></span><br><span class="line">yum -y install  gcc gcc-c++ make binutils compat-libstdc++-33 elfutils-libelf elfutils-libelf-devel elfutils-libelf-devel-static glibc glibc-common glibc-devel ksh libaio libaio-devel libgcc libstdc++ libstdc++-devel numactl-devel sysstat unixODBC unixODBC-devel kernel-headers pdksh pcre-devel readline rlwrap</span><br><span class="line"></span><br><span class="line"><span class="comment">######################################################################</span></span><br><span class="line"><span class="comment">#                                                                    #</span></span><br><span class="line"><span class="comment">#                                                                    #</span></span><br><span class="line"><span class="comment">#               准备工作：Oracle系统用户、组、用户密码管理                #</span></span><br><span class="line"><span class="comment">#                                                                    #</span></span><br><span class="line"><span class="comment">#                                                                    #</span></span><br><span class="line"><span class="comment">######################################################################</span></span><br><span class="line"><span class="comment">#创建用户、组</span></span><br><span class="line">$ groupadd oinstall &amp;&amp; groupadd dba &amp;&amp; useradd -g oinstall -G dba oracle</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;sadfafw&quot;</span> | passwd --stdin oracle &amp;&amp; <span class="built_in">id</span> oracle         --系统用户oracle的密码不能太简单，容易被入侵</span><br><span class="line"></span><br><span class="line"><span class="comment">######################################################################</span></span><br><span class="line"><span class="comment">#                                                                    #</span></span><br><span class="line"><span class="comment">#                                                                    #</span></span><br><span class="line"><span class="comment">#               准备工作：Oracle文件、目录、系统权限管理                  #</span></span><br><span class="line"><span class="comment">#                                                                    #</span></span><br><span class="line"><span class="comment">#                                                                    #</span></span><br><span class="line"><span class="comment">######################################################################</span></span><br><span class="line"><span class="comment">#上传安装包文件</span></span><br><span class="line">sftp:/root&gt; </span><br><span class="line">Uploading linux.x64_11gR2_client.zip to remote:/root/linux.x64_11gR2_client.zip</span><br><span class="line">MB, 1.12 MB/sec</span><br><span class="line"><span class="comment">#创建安装包文件存放目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /data/u01/software</span><br><span class="line"><span class="built_in">mv</span> linux.x64_11gR2_database_* /data/u01/software/ &amp;&amp; <span class="built_in">cd</span> /data/u01/software</span><br><span class="line"><span class="comment">#解压安装包文件</span></span><br><span class="line">unzip linux.x64_11gR2_database_1of2.zip &amp;&amp; unzip linux.x64_11gR2_database_2of2.zip</span><br><span class="line"><span class="comment">#创建目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /data/u01/app/oracle/product/11.2.0/dbhome_1</span><br><span class="line"><span class="built_in">mkdir</span> /data/u01/app/oracle/&#123;oradata,inventory,fast_recovery_area&#125;</span><br><span class="line"><span class="built_in">chown</span> -R oracle:oinstall /data/u01/app/oracle</span><br><span class="line"><span class="built_in">chmod</span> -R 775 /data/u01/app/oracle</span><br><span class="line"></span><br><span class="line"><span class="comment">######################################################################</span></span><br><span class="line"><span class="comment">#                                                                    #</span></span><br><span class="line"><span class="comment">#                                                                    #</span></span><br><span class="line"><span class="comment">#                准备工作：配置内核参数及Oracle用户环境变量               #</span></span><br><span class="line"><span class="comment">#                                                                    #</span></span><br><span class="line"><span class="comment">#                                                                    #</span></span><br><span class="line"><span class="comment">######################################################################</span></span><br><span class="line"><span class="comment">#修改内核参数</span></span><br><span class="line">vim /etc/sysctl.conf</span><br><span class="line"><span class="comment">#添加以下内容</span></span><br><span class="line">fs.aio-max-nr = 1048576</span><br><span class="line">fs.file-max = 6815744</span><br><span class="line">kernel.shmall = 2097152</span><br><span class="line">kernel.shmmax = 1073741824</span><br><span class="line">kernel.shmmni = 4096</span><br><span class="line">kernel.sem = 250 32000 100 128</span><br><span class="line">net.ipv4.ip_local_port_range = 9000 65500</span><br><span class="line">net.core.rmem_default = 262144</span><br><span class="line">net.core.rmem_max = 4194304</span><br><span class="line">net.core.wmem_default = 262144</span><br><span class="line">net.core.wmem_max = 1048576</span><br><span class="line"><span class="comment">#使内核新配置生效</span></span><br><span class="line">sysctl -p</span><br><span class="line"><span class="comment">#修改用户限制</span></span><br><span class="line">vim /etc/security/limits.conf</span><br><span class="line"><span class="comment">#添加以下内容</span></span><br><span class="line">oracle           soft    <span class="built_in">nproc</span>           2047</span><br><span class="line">oracle           hard    <span class="built_in">nproc</span>           16384</span><br><span class="line">oracle           soft    nofile          1024</span><br><span class="line">oracle           hard    nofile          65536</span><br><span class="line">oracle           soft    stack           10240</span><br><span class="line"><span class="comment">#修改/etc/pam.d/login文件</span></span><br><span class="line">vim /etc/pam.d/login</span><br><span class="line"><span class="comment">#添加以下内容</span></span><br><span class="line">session  required   /lib64/security/pam_limits.so</span><br><span class="line">session  required   pam_limits.so</span><br><span class="line"><span class="comment">#修改/etc/profile文件</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment">#添加以下内容</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$USER</span> = <span class="string">&quot;oracle&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$SHELL</span> = <span class="string">&quot;/bin/ksh&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">ulimit</span> -p 16384</span><br><span class="line">   <span class="built_in">ulimit</span> -n 65536</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">   <span class="built_in">ulimit</span> -u 16384 -n 65536</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#设置oracle用户环境变量</span></span><br><span class="line">su - oracle</span><br><span class="line">vim .bash_profile</span><br><span class="line"><span class="comment">#添加以下内容</span></span><br><span class="line"><span class="built_in">export</span> ORACLE_BASE=/data/u01/app/oracle</span><br><span class="line"><span class="built_in">export</span> ORACLE_HOME=/data/u01/app/oracle/product/11.2.0/dbhome_1</span><br><span class="line"><span class="built_in">export</span> ORACLE_SID=orcl</span><br><span class="line"><span class="built_in">export</span> ORACLE_UNQNAME=<span class="variable">$ORACLE_SID</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$ORACLE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> NLS_LANG=american_america.AL32UTF8</span><br><span class="line"><span class="built_in">alias</span> sqlplus=<span class="string">&#x27;rlwrap sqlplus&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> rman=<span class="string">&#x27;rlwrap rman&#x27;</span></span><br><span class="line"><span class="comment"># 使bash_profile生效 </span></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment">######################################################################</span></span><br><span class="line"><span class="comment">#                                                                    #</span></span><br><span class="line"><span class="comment">#                                                                    #</span></span><br><span class="line"><span class="comment">#             根据响应文件静默安装Oracle 11g 软件（OUI）                 #</span></span><br><span class="line"><span class="comment">#                                                                    #</span></span><br><span class="line"><span class="comment">#                                                                    #</span></span><br><span class="line"><span class="comment">######################################################################</span></span><br><span class="line"><span class="comment">#编辑静默安装响应文件</span></span><br><span class="line"><span class="built_in">cp</span> -R /data/u01/software/database/response/ . &amp;&amp; <span class="built_in">cd</span> response/</span><br><span class="line">vim db_install.rsp</span><br><span class="line"><span class="comment">#设置以下内容</span></span><br><span class="line">oracle.install.option=INSTALL_DB_SWONLY</span><br><span class="line">ORACLE_HOSTNAME=vpn(自己的hostname名字)</span><br><span class="line">UNIX_GROUP_NAME=oinstall</span><br><span class="line">INVENTORY_LOCATION=/data/u01/app/oracle/inventory</span><br><span class="line">SELECTED_LANGUAGES=en,zh_CN</span><br><span class="line">ORACLE_HOME=/data/u01/app/oracle/product/11.2.0/dbhome_1</span><br><span class="line">ORACLE_BASE=/data/u01/app/oracle</span><br><span class="line">oracle.install.db.InstallEdition=EE</span><br><span class="line">oracle.install.db.DBA_GROUP=dba</span><br><span class="line">oracle.install.db.OPER_GROUP=dba</span><br><span class="line">DECLINE_SECURITY_UPDATES=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /data/u01/software/database/</span><br><span class="line">$ ./runInstaller -silent -responseFile /home/oracle/response/db_install.rsp -ignorePrereq</span><br><span class="line"></span><br><span class="line"><span class="comment">#----------------安装过程中发现阿里云默认系统安装时，没有Swap分区，需要创建文件作为swap分区</span></span><br><span class="line">[oracle@vpn database]$ ./runInstaller -silent -responseFile /home/oracle/response/db_install.rsp -ignorePrereq</span><br><span class="line">Starting Oracle Universal Installer...</span><br><span class="line"></span><br><span class="line">Checking Temp space: must be greater than 120 MB.   Actual 36326 MB    Passed</span><br><span class="line">Checking swap space: 0 MB available, 150 MB required.    Failed &lt;&lt;&lt;&lt;</span><br><span class="line"></span><br><span class="line"><span class="string">Some requirement checks failed. You must fulfill these requirements before</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">continuing with the installation,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Exiting Oracle Universal Installer, log for this session can be found at /tmp/OraInstall2017-05-18_04-16-17PM/installActions2017-05-</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">18_04-16-17PM.log</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#--------</span></span><br><span class="line"><span class="string">[oracle@vpn database]$ free -m</span></span><br><span class="line"><span class="string">              total        used        free      shared  buff/cache   available</span></span><br><span class="line"><span class="string">Mem:           7822         106        2102           0        5612        7402</span></span><br><span class="line"><span class="string">Swap:             0           0           0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#-----------------以下是用文件作为Swap分区的操作步骤</span></span><br><span class="line"><span class="string">#创建要作为swap分区的文件:增加4GB大小的交换分区</span></span><br><span class="line"><span class="string">dd if=/dev/zero of=/data/swapfile bs=1M count=4096</span></span><br><span class="line"><span class="string">#格式化为交换分区文件</span></span><br><span class="line"><span class="string">mkswap /data/swapfile</span></span><br><span class="line"><span class="string">#启用交换分区文件</span></span><br><span class="line"><span class="string">swapon /data/swapfile</span></span><br><span class="line"><span class="string">#使系统开机时自启用，在文件/etc/fstab中添加一行</span></span><br><span class="line"><span class="string">/data/swapfile swap swap defaults 0 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#----------------以下是重新安装的运行结果</span></span><br><span class="line"><span class="string">[oracle@vpn database]$ ./runInstaller -silent -responseFile /home/oracle/response/db_install.rsp -ignorePrereq</span></span><br><span class="line"><span class="string">Starting Oracle Universal Installer...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Checking Temp space: must be greater than 120 MB.   Actual 36324 MB    Passed</span></span><br><span class="line"><span class="string">Checking swap space: must be greater than 150 MB.   Actual 4095 MB    Passed</span></span><br><span class="line"><span class="string">Preparing to launch Oracle Universal Installer from /tmp/OraInstall2017-05-18_04-31-20PM. Please wait ...[oracle@vpn database]$ </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[WARNING] [INS-32055] The Central Inventory is located in the Oracle base.</span></span><br><span class="line"><span class="string">   CAUSE: The Central Inventory is located in the Oracle base.</span></span><br><span class="line"><span class="string">   ACTION: Oracle recommends placing this Central Inventory in a location outside the Oracle base directory.</span></span><br><span class="line"><span class="string">[WARNING] [INS-32055] The Central Inventory is located in the Oracle base.</span></span><br><span class="line"><span class="string">   CAUSE: The Central Inventory is located in the Oracle base.</span></span><br><span class="line"><span class="string">   ACTION: Oracle recommends placing this Central Inventory in a location outside the Oracle base directory.</span></span><br><span class="line"><span class="string">You can find the log of this install session at:</span></span><br><span class="line"><span class="string"> /data/u01/app/oracle/inventory/logs/installActions2017-05-18_04-31-20PM.log</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[oracle@vpn database]$ </span></span><br><span class="line"><span class="string">##########################################################################</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#打开终端，以root身份登录，执行脚本：</span></span><br><span class="line"><span class="string">ctrl +d</span></span><br><span class="line"><span class="string">[root@vpn ~]# sh /data/u01/app/oracle/inventory/orainstRoot.sh</span></span><br><span class="line"><span class="string">Changing permissions of /data/u01/app/oracle/inventory.</span></span><br><span class="line"><span class="string">Adding read,write permissions for group.</span></span><br><span class="line"><span class="string">Removing read,write,execute permissions for world.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Changing groupname of /data/u01/app/oracle/inventory to oinstall.</span></span><br><span class="line"><span class="string">The execution of the script is complete.</span></span><br><span class="line"><span class="string">[root@vpn ~]# sh /data/u01/app/oracle/product/11.2.0/dbhome_1/root.sh</span></span><br><span class="line"><span class="string">Check /data/u01/app/oracle/product/11.2.0/dbhome_1/install/root_vpn_2017-05-18_16-40-51.log for the output of root script</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">######################################################################</span></span><br><span class="line"><span class="string">#                                                                    #</span></span><br><span class="line"><span class="string">#                                                                    #</span></span><br><span class="line"><span class="string">#             根据响应文件静默配置监听（NETCA）                          #</span></span><br><span class="line"><span class="string">#                                                                    #</span></span><br><span class="line"><span class="string">#                                                                    #</span></span><br><span class="line"><span class="string">######################################################################</span></span><br><span class="line"><span class="string">#查看监听响应文件配置信息</span></span><br><span class="line"><span class="string">[oracle@vpn ~]$ egrep -v &quot;(^#|^$)&quot; /home/oracle/response/netca.rsp</span></span><br><span class="line"><span class="string">[GENERAL]</span></span><br><span class="line"><span class="string">RESPONSEFILE_VERSION=&quot;11.2&quot;</span></span><br><span class="line"><span class="string">CREATE_TYPE=&quot;CUSTOM&quot;</span></span><br><span class="line"><span class="string">[oracle.net.ca]</span></span><br><span class="line"><span class="string">INSTALLED_COMPONENTS=&#123;&quot;server&quot;,&quot;net8&quot;,&quot;javavm&quot;&#125;</span></span><br><span class="line"><span class="string">INSTALL_TYPE=&quot;&quot;typical&quot;&quot;</span></span><br><span class="line"><span class="string">LISTENER_NUMBER=1</span></span><br><span class="line"><span class="string">LISTENER_NAMES=&#123;&quot;LISTENER&quot;&#125;</span></span><br><span class="line"><span class="string">LISTENER_PROTOCOLS=&#123;&quot;TCP;1521&quot;&#125;</span></span><br><span class="line"><span class="string">LISTENER_START=&quot;&quot;LISTENER&quot;&quot;</span></span><br><span class="line"><span class="string">NAMING_METHODS=&#123;&quot;TNSNAMES&quot;,&quot;ONAMES&quot;,&quot;HOSTNAME&quot;&#125;</span></span><br><span class="line"><span class="string">NSN_NUMBER=1</span></span><br><span class="line"><span class="string">NSN_NAMES=&#123;&quot;EXTPROC_CONNECTION_DATA&quot;&#125;</span></span><br><span class="line"><span class="string">NSN_SERVICE=&#123;&quot;PLSExtProc&quot;&#125;</span></span><br><span class="line"><span class="string">NSN_PROTOCOLS=&#123;&quot;TCP;HOSTNAME;1521&quot;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#以静默方式配置监听</span></span><br><span class="line"><span class="string">[oracle@vpn oracle]$ netca /silent /responsefile /home/oracle/response/netca.rsp</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Parsing command line arguments:</span></span><br><span class="line"><span class="string">    Parameter &quot;silent&quot; = true</span></span><br><span class="line"><span class="string">    Parameter &quot;responsefile&quot; = /home/oracle/response/netca.rsp</span></span><br><span class="line"><span class="string">Done parsing command line arguments.</span></span><br><span class="line"><span class="string">Oracle Net Services Configuration:</span></span><br><span class="line"><span class="string">Profile configuration complete.</span></span><br><span class="line"><span class="string">Oracle Net Listener Startup:</span></span><br><span class="line"><span class="string">    Running Listener Control: </span></span><br><span class="line"><span class="string">      /data/u01/app/oracle/product/11.2.0/dbhome_1/bin/lsnrctl start LISTENER</span></span><br><span class="line"><span class="string">    Listener Control complete.</span></span><br><span class="line"><span class="string">    Listener started successfully.</span></span><br><span class="line"><span class="string">Listener configuration complete.</span></span><br><span class="line"><span class="string">Oracle Net Services configuration successful. The exit code is 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@vpn ~]# netstat -tnulp | grep 1521</span></span><br><span class="line"><span class="string">tcp        0      0 0.0.0.0:1521            0.0.0.0:*               LISTEN      23576/tnslsnr</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#查看监听状态</span></span><br><span class="line"><span class="string">[oracle@vpn ~]$ lsnrctl status</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">LSNRCTL for Linux: Version 11.2.0.1.0 - Production on 18-MAY-2017 17:16:05</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Copyright (c) 1991, 2009, Oracle.  All rights reserved.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Connecting to (DESCRIPTION=(ADDRESS=(PROTOCOL=IPC)(KEY=EXTPROC1521)))</span></span><br><span class="line"><span class="string">STATUS of the LISTENER</span></span><br><span class="line"><span class="string">------------------------</span></span><br><span class="line"><span class="string">Alias                     LISTENER</span></span><br><span class="line"><span class="string">Version                   TNSLSNR for Linux: Version 11.2.0.1.0 - Production</span></span><br><span class="line"><span class="string">Start Date                18-MAY-2017 16:42:56</span></span><br><span class="line"><span class="string">Uptime                    0 days 0 hr. 33 min. 9 sec</span></span><br><span class="line"><span class="string">Trace Level               off</span></span><br><span class="line"><span class="string">Security                  ON: Local OS Authentication</span></span><br><span class="line"><span class="string">SNMP                      OFF</span></span><br><span class="line"><span class="string">Listener Parameter File   /data/u01/app/oracle/product/11.2.0/dbhome_1/network/admin/listener.ora</span></span><br><span class="line"><span class="string">Listener Log File         /data/u01/app/oracle/diag/tnslsnr/vpn/listener/alert/log.xml</span></span><br><span class="line"><span class="string">Listening Endpoints Summary...</span></span><br><span class="line"><span class="string">  (DESCRIPTION=(ADDRESS=(PROTOCOL=ipc)(KEY=EXTPROC1521)))</span></span><br><span class="line"><span class="string">  (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=vpn)(PORT=1521)))</span></span><br><span class="line"><span class="string">Services Summary...</span></span><br><span class="line"><span class="string">Service &quot;orcl&quot; has 1 instance(s).</span></span><br><span class="line"><span class="string">  Instance &quot;orcl&quot;, status READY, has 1 handler(s) for this service...</span></span><br><span class="line"><span class="string">Service &quot;orclXDB&quot; has 1 instance(s).</span></span><br><span class="line"><span class="string">  Instance &quot;orcl&quot;, status READY, has 1 handler(s) for this service...</span></span><br><span class="line"><span class="string">The command completed successfully</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#查看监听器配置文件 listener.ora</span></span><br><span class="line"><span class="string">[oracle@vpn ~]$ cat $ORACLE_HOME/network/admin/listener.ora</span></span><br><span class="line"><span class="string"># listener.ora Network Configuration File: /data/u01/app/oracle/product/11.2.0/dbhome_1/network/admin/listener.ora</span></span><br><span class="line"><span class="string"># Generated by Oracle configuration tools.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">LISTENER =</span></span><br><span class="line"><span class="string">  (DESCRIPTION_LIST =</span></span><br><span class="line"><span class="string">    (DESCRIPTION =</span></span><br><span class="line"><span class="string">      (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521))</span></span><br><span class="line"><span class="string">      (ADDRESS = (PROTOCOL = TCP)(HOST = vpn)(PORT = 1521))</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">  )</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ADR_BASE_LISTENER = /data/u01/app/oracle</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#查看监听服务名配置文件 tnsnames.ora</span></span><br><span class="line"><span class="string">[oracle@vpn ~]$ cat $ORACLE_HOME/network/admin/tnsnames.ora </span></span><br><span class="line"><span class="string"># tnsnames.ora Network Configuration File: /data/u01/app/oracle/product/11.2.0/dbhome_1/network/admin/tnsnames.ora</span></span><br><span class="line"><span class="string"># Generated by Oracle configuration tools.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ORCL =</span></span><br><span class="line"><span class="string">  (DESCRIPTION =</span></span><br><span class="line"><span class="string">    (ADDRESS = (PROTOCOL = TCP)(HOST = vpn)(PORT = 1521))</span></span><br><span class="line"><span class="string">    (CONNECT_DATA =</span></span><br><span class="line"><span class="string">      (SERVER = DEDICATED)</span></span><br><span class="line"><span class="string">      (SERVICE_NAME = orcl)</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">  )</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">######################################################################</span></span><br><span class="line"><span class="string">#                                                                    #</span></span><br><span class="line"><span class="string">#                                                                    #</span></span><br><span class="line"><span class="string">#             根据响应文件静默建库和实例（DBCA）                         #</span></span><br><span class="line"><span class="string">#                                                                    #</span></span><br><span class="line"><span class="string">#                                                                    #</span></span><br><span class="line"><span class="string">######################################################################</span></span><br><span class="line"><span class="string">#配置以静默方式建立新库，和实例 的响应文件</span></span><br><span class="line"><span class="string">vim /home/oracle/response/dbca.rsp</span></span><br><span class="line"><span class="string">#设置以下参数</span></span><br><span class="line"><span class="string">GDBNAME = &quot;orcl&quot;</span></span><br><span class="line"><span class="string">SID = &quot;orcl&quot;</span></span><br><span class="line"><span class="string">SYSPASSWORD = &quot;SYS用户密码&quot;</span></span><br><span class="line"><span class="string">SYSTEMPASSWORD = &quot;SYSTEM用户密码&quot;</span></span><br><span class="line"><span class="string">SYSMANPASSWORD = &quot;sysman&quot;</span></span><br><span class="line"><span class="string">DBSNMPPASSWORD = &quot;dbsnmp&quot;</span></span><br><span class="line"><span class="string">DATAFILEDESTINATION =/data/u01/app/oracle/oradata</span></span><br><span class="line"><span class="string">RECOVERYAREADESTINATION=/data/u01/app/oracle/fast_recovery_area</span></span><br><span class="line"><span class="string">CHARACTERSET = &quot;AL32UTF8&quot;</span></span><br><span class="line"><span class="string">TOTALMEMORY = &quot;6144&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#查看建库响应文件配置信息</span></span><br><span class="line"><span class="string">[root@vpn ~]# egrep -v &quot;(^#|^$)&quot; /home/oracle/response/dbca.rsp</span></span><br><span class="line"><span class="string">[GENERAL]</span></span><br><span class="line"><span class="string">RESPONSEFILE_VERSION = &quot;11.2.0&quot;</span></span><br><span class="line"><span class="string">OPERATION_TYPE = &quot;createDatabase&quot;</span></span><br><span class="line"><span class="string">[CREATEDATABASE]</span></span><br><span class="line"><span class="string">GDBNAME = &quot;orcl&quot;</span></span><br><span class="line"><span class="string">SID = &quot;orcl&quot;</span></span><br><span class="line"><span class="string">TEMPLATENAME = &quot;General_Purpose.dbc&quot;</span></span><br><span class="line"><span class="string">SYSPASSWORD = &quot;oracle123456&quot;</span></span><br><span class="line"><span class="string">SYSTEMPASSWORD = &quot;Xunshi2017&quot;</span></span><br><span class="line"><span class="string">DATAFILEDESTINATION =/data/u01/app/oracle/oradata</span></span><br><span class="line"><span class="string">RECOVERYAREADESTINATION=/data/u01/app/oracle/fast_recovery_area</span></span><br><span class="line"><span class="string">CHARACTERSET = &quot;AL32UTF8&quot;</span></span><br><span class="line"><span class="string">TOTALMEMORY = &quot;6144&quot;</span></span><br><span class="line"><span class="string">[createTemplateFromDB]</span></span><br><span class="line"><span class="string">SOURCEDB = &quot;myhost:1521:orcl&quot;</span></span><br><span class="line"><span class="string">SYSDBAUSERNAME = &quot;system&quot;</span></span><br><span class="line"><span class="string">TEMPLATENAME = &quot;My Copy TEMPLATE&quot;</span></span><br><span class="line"><span class="string">[createCloneTemplate]</span></span><br><span class="line"><span class="string">SOURCEDB = &quot;orcl&quot;</span></span><br><span class="line"><span class="string">TEMPLATENAME = &quot;My Clone TEMPLATE&quot;</span></span><br><span class="line"><span class="string">[DELETEDATABASE]</span></span><br><span class="line"><span class="string">SOURCEDB = &quot;orcl&quot;</span></span><br><span class="line"><span class="string">[generateScripts]</span></span><br><span class="line"><span class="string">TEMPLATENAME = &quot;New Database&quot;</span></span><br><span class="line"><span class="string">[CONFIGUREDATABASE]</span></span><br><span class="line"><span class="string">SYSMANPASSWORD = &quot;sysman&quot;</span></span><br><span class="line"><span class="string">DBSNMPPASSWORD = &quot;dbsnmp&quot;</span></span><br><span class="line"><span class="string">[ADDINSTANCE]</span></span><br><span class="line"><span class="string">DB_UNIQUE_NAME = &quot;orcl11g.us.oracle.com&quot;</span></span><br><span class="line"><span class="string">NODELIST=</span></span><br><span class="line"><span class="string">SYSDBAUSERNAME = &quot;sys&quot;</span></span><br><span class="line"><span class="string">[DELETEINSTANCE]</span></span><br><span class="line"><span class="string">DB_UNIQUE_NAME = &quot;orcl11g.us.oracle.com&quot;</span></span><br><span class="line"><span class="string">INSTANCENAME = &quot;orcl11g&quot;</span></span><br><span class="line"><span class="string">SYSDBAUSERNAME = &quot;sys&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#启用配置，以静默方式建立新库，和实例</span></span><br><span class="line"><span class="string">[oracle@vpn ~]$ dbca -silent -responseFile /home/oracle/response/dbca.rsp</span></span><br><span class="line"><span class="string">Copying database files</span></span><br><span class="line"><span class="string">1% complete</span></span><br><span class="line"><span class="string">3% complete</span></span><br><span class="line"><span class="string">11% complete</span></span><br><span class="line"><span class="string">18% complete</span></span><br><span class="line"><span class="string">26% complete</span></span><br><span class="line"><span class="string">37% complete</span></span><br><span class="line"><span class="string">Creating and starting Oracle instance</span></span><br><span class="line"><span class="string">40% complete</span></span><br><span class="line"><span class="string">45% complete</span></span><br><span class="line"><span class="string">50% complete</span></span><br><span class="line"><span class="string">55% complete</span></span><br><span class="line"><span class="string">56% complete</span></span><br><span class="line"><span class="string">60% complete</span></span><br><span class="line"><span class="string">62% complete</span></span><br><span class="line"><span class="string">Completing Database Creation</span></span><br><span class="line"><span class="string">66% complete</span></span><br><span class="line"><span class="string">70% complete</span></span><br><span class="line"><span class="string">73% complete</span></span><br><span class="line"><span class="string">85% complete</span></span><br><span class="line"><span class="string">96% complete</span></span><br><span class="line"><span class="string">100% complete</span></span><br><span class="line"><span class="string">Look at the log file &quot;/data/u01/app/oracle/cfgtoollogs/dbca/orcl/orcl.log&quot; for further details.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#检查实例后台进程</span></span><br><span class="line"><span class="string">[oracle@vpn ~]$ ps -ef | grep ora_ | grep -v grep</span></span><br><span class="line"><span class="string">oracle   28014     1  0 17:11 ?        00:00:00 ora_pmon_orcl</span></span><br><span class="line"><span class="string">oracle   28016     1  0 17:11 ?        00:00:00 ora_vktm_orcl</span></span><br><span class="line"><span class="string">oracle   28020     1  0 17:11 ?        00:00:00 ora_gen0_orcl</span></span><br><span class="line"><span class="string">oracle   28022     1  0 17:11 ?        00:00:00 ora_diag_orcl</span></span><br><span class="line"><span class="string">oracle   28024     1  0 17:11 ?        00:00:00 ora_dbrm_orcl</span></span><br><span class="line"><span class="string">oracle   28026     1  0 17:11 ?        00:00:00 ora_psp0_orcl</span></span><br><span class="line"><span class="string">oracle   28028     1  0 17:11 ?        00:00:00 ora_dia0_orcl</span></span><br><span class="line"><span class="string">oracle   28030     1  0 17:11 ?        00:00:00 ora_mman_orcl</span></span><br><span class="line"><span class="string">oracle   28032     1  0 17:11 ?        00:00:00 ora_dbw0_orcl</span></span><br><span class="line"><span class="string">oracle   28034     1  0 17:11 ?        00:00:00 ora_lgwr_orcl</span></span><br><span class="line"><span class="string">oracle   28036     1  0 17:11 ?        00:00:00 ora_ckpt_orcl</span></span><br><span class="line"><span class="string">oracle   28038     1  0 17:11 ?        00:00:00 ora_smon_orcl</span></span><br><span class="line"><span class="string">oracle   28040     1  0 17:11 ?        00:00:00 ora_reco_orcl</span></span><br><span class="line"><span class="string">oracle   28042     1  0 17:11 ?        00:00:00 ora_mmon_orcl</span></span><br><span class="line"><span class="string">oracle   28044     1  0 17:11 ?        00:00:00 ora_mmnl_orcl</span></span><br><span class="line"><span class="string">oracle   28046     1  0 17:11 ?        00:00:00 ora_d000_orcl</span></span><br><span class="line"><span class="string">oracle   28048     1  0 17:11 ?        00:00:00 ora_s000_orcl</span></span><br><span class="line"><span class="string">oracle   28068     1  0 17:11 ?        00:00:00 ora_qmnc_orcl</span></span><br><span class="line"><span class="string">oracle   28083     1  0 17:11 ?        00:00:00 ora_cjq0_orcl</span></span><br><span class="line"><span class="string">oracle   28105     1  0 17:11 ?        00:00:00 ora_q000_orcl</span></span><br><span class="line"><span class="string">oracle   28107     1  0 17:11 ?        00:00:00 ora_q001_orcl</span></span><br></pre></td></tr></table></figure><p>###SQLPlus 命令行连接Oracle数据库 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######################################################################</span></span><br><span class="line"><span class="comment">#                                                                    #</span></span><br><span class="line"><span class="comment">#                                                                    #</span></span><br><span class="line"><span class="comment">#             SQLPlus 命令行连接Oracle数据库                           #</span></span><br><span class="line"><span class="comment">#                                                                    #</span></span><br><span class="line"><span class="comment">#                                                                    #</span></span><br><span class="line"><span class="comment">######################################################################</span></span><br><span class="line"><span class="comment">#登录查看实例状态</span></span><br><span class="line">[oracle@vpn ~]$ sqlplus / as sysdba</span><br><span class="line"></span><br><span class="line">SQL*Plus: Release 11.2.0.1.0 Production on Thu May 18 17:18:51 2017</span><br><span class="line"></span><br><span class="line">Copyright (c) 1982, 2009, Oracle.  All rights reserved.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Connected to:</span><br><span class="line">Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production</span><br><span class="line">With the Partitioning, OLAP, Data Mining and Real Application Testing options</span><br><span class="line"></span><br><span class="line">SQL&gt; <span class="keyword">select</span> status from v<span class="variable">$instance</span>;</span><br><span class="line"></span><br><span class="line">STATUS</span><br><span class="line">------------</span><br><span class="line">OPEN</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.cnblogs.com/cenliang/p/6875106.html">https://www.cnblogs.com/cenliang/p/6875106.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 安装 </tag>
            
            <tag> oracle </tag>
            
            <tag> 阿里云 </tag>
            
            <tag> oracle安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>arcgis for javascript 4.9 Info</title>
      <link href="/2018/11/19/arcgis-4x-datas/"/>
      <url>/2018/11/19/arcgis-4x-datas/</url>
      
        <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li>Icons：<a href="https://carolyn-kim.github.io/dataReference/arcgisIcons/index.html">https://carolyn-kim.github.io/dataReference/arcgisIcons/index.html</a></li><li>加载高德地图&amp;天地图【VUE DEMO】：<a href="https://github.com/carolyn-Kim/arcgis4.x-vue">https://github.com/carolyn-Kim/arcgis4.x-vue</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> arcgis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arcgis </tag>
            
            <tag> arcgis 4.9 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker容器和主机如何互相拷贝传输文件</title>
      <link href="/2018/10/12/docker-cp/"/>
      <url>/2018/10/12/docker-cp/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker容器和主机如何互相拷贝传输文件"><a href="#Docker容器和主机如何互相拷贝传输文件" class="headerlink" title="Docker容器和主机如何互相拷贝传输文件"></a>Docker容器和主机如何互相拷贝传输文件</h1><blockquote><p>docker cp :用于容器与主机之间的数据拷贝。</p></blockquote><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">cp</span> [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-</span><br><span class="line"></span><br><span class="line">$ docker <span class="built_in">cp</span> [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li>-L :保持源目标中的链接</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>本地传输到容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">cp</span> 本地文件路径 ID全称:容器路径</span><br></pre></td></tr></table></figure><p> 容器传输文件到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">cp</span> ID全称:容器文件路径 本地路径</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 拷贝 </tag>
            
            <tag> 复制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker下的gitlab、jenkins的安装和配置</title>
      <link href="/2018/10/12/docker-gitlab-jenkins/"/>
      <url>/2018/10/12/docker-gitlab-jenkins/</url>
      
        <content type="html"><![CDATA[<h1 id="docker下的gitlab、jenkins的安装和配置"><a href="#docker下的gitlab、jenkins的安装和配置" class="headerlink" title="docker下的gitlab、jenkins的安装和配置"></a>docker下的gitlab、jenkins的安装和配置</h1><blockquote><p>本文中所使用的都是阿里云的服务器，CentOS系统。</p></blockquote><ol><li><p>什么是持续集成?</p><p>在软件工程中，持续集成（CI）是指将所有开发者的工作副本每天多次合并到主干的做法。Grady Booch 在1991年的 Booch method 中首次命名并提出了 CI 的概念，尽管在当时他并不主张每天多次集成。而 XP（Extreme programming，极限编程）采用了 CI 的概念，并提倡每天不止一次集成。</p></li><li><p>为什么要实现自动打包发布上线的功能？</p><ul><li>减少重复性工作，方便项目管理</li><li>一个产品或者项目的额上线要经历开发、测试、部署三个环节。如过一个公司可能产品或者项目就有上百个，那么每个产品或者项目都需要重复走着三个环节的时候。减少产品或者项目中重复性工作，这样更加利于管理和高效。</li></ul></li><li><p>实现自动化部署的基本流程</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-083002.png" alt="image-20181010145928469"></p><p>简要概括上述步骤：</p><ul><li>开发者，提交代码到<code>Gitlab</code>中</li><li><code>Jenkins</code>触发自动构建，压缩打包发送到发布服务器中</li><li><code>nginx</code>通过反向代理实现了自动化部署</li></ul></li></ol><h2 id="Gitlab"><a href="#Gitlab" class="headerlink" title="Gitlab"></a>Gitlab</h2><h3 id="使用docker安装Gitlab"><a href="#使用docker安装Gitlab" class="headerlink" title="使用docker安装Gitlab"></a>使用docker安装Gitlab</h3><ol><li><p>查找docker的gitlab镜像</p></li><li><p>下载docker的Jenkins镜像</p><p><code>docker pull gitlab/gitlab-ce</code></p></li><li><p>启动gitlab</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run --detach \</span><br><span class="line">    --hostname 192.168.40.147 \ <span class="comment">#hostname 自己的主机IP</span></span><br><span class="line">    --publish 443:443 <span class="comment">#https</span></span><br><span class="line">    --publish 8088:80 <span class="comment">#http</span></span><br><span class="line">    --publish 22:22 \ <span class="comment">#ssh</span></span><br><span class="line">    --name gitlab \</span><br><span class="line">    --restart always \</span><br><span class="line">    --volume /srv/gitlab/config:/etc/gitlab \</span><br><span class="line">    --volume /srv/gitlab/logs:/var/log/gitlab \</span><br><span class="line">    --volume /srv/gitlab/data:/var/opt/gitlab \</span><br><span class="line">    gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure></li><li><p>可能会报错，报端口已经被占用。这边我把服务器的ssh的端口更改为<code>2222</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment">#将port：22更改为</span></span><br><span class="line">port: 2222</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新启动ssh</span></span><br><span class="line">$ service sshd restart</span><br></pre></td></tr></table></figure></li></ol><h3 id="配置Gitlab"><a href="#配置Gitlab" class="headerlink" title="配置Gitlab"></a>配置Gitlab</h3><p>   进入docker bash中</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#gitlab是刚刚指定的Gitlab名称</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it gitlab /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="comment">#docker ps(查看容器)</span></span><br><span class="line"><span class="comment">#执行后CONTAINER ID也能进入</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it 3c26d1799845 bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入gitlab的bash后</span></span><br><span class="line">$ ruby --version</span><br><span class="line">$ git --version</span><br><span class="line">$ redis-cli --version</span><br><span class="line">$ psql --version</span><br><span class="line"><span class="comment">#都能显示对应的版本号，不需要复杂的继续安装。</span></span><br></pre></td></tr></table></figure><p>gitlab中的操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改配置文件</span></span><br><span class="line">$ vi /etc/gitlab/gitlab.rb </span><br><span class="line"></span><br><span class="line"><span class="comment">#应用配置</span></span><br><span class="line">$ gitlab-ctl reconfigure</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启</span></span><br><span class="line">$ gitlab-ctl restart</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">$ gitlab-ctl status</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line">$ gitlab-ctl start</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止</span></span><br><span class="line">$ gitlab-ctl stop</span><br></pre></td></tr></table></figure><ul><li>配置文件参数具体参考<a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/configuration.md">官网</a></li></ul><p>访问 <code>http://服务器地址:8088/</code> 进入gitlab访问界面。第一次访问是让我们修改管理员密码</p><p>设置后管理员密码后，就进入登录页面，输入用户名 root 和刚才设置的密码就进入了 gitlab 的控制台。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#连接测试</span></span><br><span class="line">$ ssh -T -v git@gitlab.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果有错误信息 最后几行会有详细的错误信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#连接测试，如果成功会显示欢迎信息</span></span><br><span class="line">$ ssh -T git@gitlab.com</span><br></pre></td></tr></table></figure><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol><li>开放相关端口</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看防火墙</span></span><br><span class="line">$ firewall-cmd --state</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动防火墙</span></span><br><span class="line">$ service firewall start</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止防火墙</span></span><br><span class="line">$ service firewall stop</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启防火墙</span></span><br><span class="line">$ service firewall restart</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加端口</span></span><br><span class="line">$ firewall-cmd --permanent --add-port=8080-8085/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新加载</span></span><br><span class="line">$ firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="comment">#移除端口</span></span><br><span class="line">$ firewall-cmd --permanent --remove-port=8080-8085/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看所有端口</span></span><br><span class="line">$ firewall-cmd --permanent --list-ports</span><br></pre></td></tr></table></figure><h2 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h2><h3 id="使用docker安装Jenkins"><a href="#使用docker安装Jenkins" class="headerlink" title="使用docker安装Jenkins"></a>使用docker安装Jenkins</h3><ol><li><p>查找docker的Jenkins镜像</p><ul><li><p>方法1：</p><p><code>docker search jenkins</code></p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-083022.png" alt="image-20181011155328763"></p></li><li><p>方法2：</p><p>访问<code>https://hub.docker.com</code>，搜索jenkins</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-083027.png" alt="image-20181011155540357"></p><p>（PS：official是官方认证的，通常使用官方镜像）</p><p>查看<code>DETAILS</code>后，右侧有<code>docker</code>命令：</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-083033.png" alt="image-20181011155717871"></p></li></ul></li><li><p>下载docker的Jenkins镜像</p><p><code>docker pull jenkins:latest</code></p></li><li><p>验证下载结果</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-083040.png" alt="image-20181011160233289"></p></li><li><p>启动Jenkins的docker镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-p 8088:8080 \</span><br><span class="line">-p 50000:50000 \</span><br><span class="line">-v jenkins:/var/jenkins_home \</span><br><span class="line">-v /etc/localtime:/etc/localtime \</span><br><span class="line">-v /etc/timezone:/etc/timezone \</span><br><span class="line">--name docker.io/jenkins</span><br></pre></td></tr></table></figure><p><code>docker ps</code>可以查看启动成功并且正在使用的容器</p><p><code>docker ps -a</code> 可以查看所有的容器，并查看status列，查看容器状态</p><p>详解参数：</p><ul><li><code>-d</code> 后台运行docker容器并打印容器ID。如果不加<code>-d</code>参数，那么容器运行会和终端绑定，如果终端关闭，那么容器也会关闭，但是容器不会被删除。但是如果你只是想试一试某个容器，运行后自动进入命令行，那么可以使用-it参数;如果你想容器关闭之后自动删除，那么就使用-rm参数。</li><li><code>--name</code> 给docker container起一个别名，后续可以通过别名来管理容器，否在会系统会默认分配一个随机的别名。</li><li><code>-p</code> docker容器和外侧的端口映射，jenkins服务是运行在docker容器内部的，但是docker容器默认不对外暴露接口，所以通过这个参数将内部的8080端口映射到服务器本身的8088端口上。</li><li><code>-v</code> 数据卷的挂载。这里涉及到docker container的一个特性，container如果停止运行了，那么再次启动时，之前所有运行相关的数据和文件就都不存在了，就类似于设置了自动还原的电脑一般，无论你做了多少的操作，一旦关机重启之后就又恢复到最初的状态。数据卷就是来解决上述问题的，通过Docker container外部的文件夹的挂载，将可持久化的文件存储到外部挂载的文件夹中。</li></ul><p> 然后你就可以根据你自己的ip地址来键入下列地址http:ip:8088来访问jenkins的主页了。 这里有一点需要注意的是，需要注意你阿里云服务器设置的网络安全协议，是否禁用掉了8088这个端口。</p></li></ol><h3 id="Jenkins配置"><a href="#Jenkins配置" class="headerlink" title="Jenkins配置"></a>Jenkins配置</h3><ol><li><p><strong>用浏览器打开<code>http://ip:port</code>运行，提示您输入管理员密码。按照提示的路径打开密码文件，输入密码即可。</strong></p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-11-071746.png" alt="gettingStarted"></p><p>PS：由于这里是用docker安装的，所以应该进入容器后找到相对应的位置。</p></li><li><p><strong>选择默认推荐安装的插件</strong></p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-11-071807.png" alt="2"></p></li><li><p><strong>创建管理员账户</strong></p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-11-071824.png"></p></li><li><p><strong>登陆页面</strong></p><p>创建成功后，输入用户名、密码，点击完成就会进入jenkins的主页。</p><p><img src="https://images.vmartaw.com/2018/07/03/jenkins_finish2.png" alt="Jenkins"></p></li><li><p><strong>安装一些插件</strong></p><ul><li><p>点击【系统管理】-【插件管理】</p></li><li><p>可以查看插件信息，选择【可选插件】，勾选安装需要的插件。也可以在【高级】中上传所需要的已下载的本地插件</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-083100.png" alt="image-20181011162408793"></p></li><li><p>这里安装了一下所需插件</p><ul><li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Gitlab+Hook+Plugin">Gitlab Hook Plugin</a> gitlab自动推送插件</li><li><a href="https://wiki.jenkins-ci.org/display/JENKINS/GitLab+Plugin">GitLab Plugin</a> gitlab插件</li><li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Email-ext+plugin">Email Extension Plugin</a> 邮件通知插件</li><li><a href="http://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin">Git plugin</a> git插件</li><li><a href="http://wiki.jenkins-ci.org/display/JENKINS/NodeJS+Plugin">NodeJS Plugin</a> nodejs插件</li><li><a href="http://wiki.jenkins-ci.org/display/JENKINS/Publish+Over+SSH+Plugin">Publish Over SSH</a> 实现jenkins和阿里服务器的互通</li></ul><p>如果需要重启在地址后面加上<code>/restart</code></p></li></ul></li><li><p><strong>创建任务</strong></p><ul><li><p>点击【新建任务】</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-083108.png" alt="image-20181011163433236"></p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-083116.png" alt="image-20181011164400582"></p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-083122.png" alt="image-20181011164524098"></p></li><li><p>【触发器构建】勾选<code>Build when a change is pushed to GitLab</code>。(需要复制后面的gitlab webhook url地址)</p></li></ul><p>  <img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-083130.png" alt="image-20181011165057831"></p><p>  这里有个选项<code>Accept merge request on success</code>，它的作用是用来筛选分支，比如同一个项目中有多个分支，可能只想自动构建其中的一个，这时就可以通过它匹配，默认是构建所有的分支。</p></li></ol><hr><p><strong>如果是新版本的jenkins，比如2.138.1，需要对权限进行设置，否则gitlab会收到403错误，无法触发构建。</strong></p><ul><li>**第一种方式 **是开启匿名用户读取的权限：<br>点击【系统管理】-【全局安全配置】-勾选 匿名用户具有可读权限</li></ul><p> <img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-074136.png" alt="image-20181011170451595"></p><p> 如果jenkins是暴露在公网的话，这种方式不安全</p><ul><li><p>推荐用<strong>第二种方法Secret token</strong></p><p>在jenkins项目的Build when a change is pushed to GitLab.配置中，选择【高级】，找到【Secret token】，点击【Generate】，将生成的token记录下来，之后配置webhook时会用到。</p><p> <img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-074137.png" alt="image-20181011165239719"></p><ul><li><p>复制【Secret token】</p></li><li><p>登录到<code>gitlab</code> 页面，管理需要自动部署的代码仓库，进入【Settings】-【Integrations】。</p></li><li><p>如果jenkins的项目中配置了Secret token，并且webhook的配置界面中有Secret Token的选项，则可以将刚才生成的token填入Secret Token中，保存配置即可。</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-083203.png" alt="image-20181011165921449"></p></li><li><p>到此先保存。回到Jenkins首页</p></li><li><p>选择【系统管理】-【系统设置】-找到【Gitlab】</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-083213.png" alt="image-20181011172323366"></p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-083219.png" alt="image-20181011172112868"></p><p>获取API token</p><p>登录gitlab，【settings】-【Access Token】-填写Name -勾选api-【Create personal access token】-即可获取</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-083224.png" alt="image-20181012161215895"></p></li><li><p>配置好【Gitlab】后，先不退出，继续在【系统设置】页面的最后找到【Publish over SSH】进行配置。</p></li></ul></li></ul><ol start="7"><li><h5 id="Jenkins与阿里服务器关联"><a href="#Jenkins与阿里服务器关联" class="headerlink" title="Jenkins与阿里服务器关联"></a>Jenkins与阿里服务器关联</h5><ul><li><p>【系统管理】-【全局工具配置】</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-074910.png" alt="image-20181012154909909"></p></li><li><p>任务中找到【构建环境】，按如下配置</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-083251.png" alt="image-20181012154611551"></p></li></ul></li><li><p><strong>构建Gitlab中的程序</strong></p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-083248.png" alt="image-20181012155315365"></p><blockquote><p>这里使用的vue项目，编译、打包、压缩。</p></blockquote></li><li><p><strong>Jenkins与阿里服务器关联</strong></p><p>配置全局系统设置SSH</p><ul><li><p>打开jenkins控制台，选择【系统管理】找到【系统设置】，点击进入：</p></li><li><p>进入后，找到【Publish over SSH】模块，配置如下：</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-083258.png" alt="image-20181012135406789"></p><p>配置内容讲解：</p><ul><li><p>Jenkins SSH Key<br> Passphrase  -&gt;  生成ssh公钥和密钥时设置的密码，没有设置就不填<br> Path to key  -&gt;  本地电脑密钥的绝对目录<br> Key  -&gt;  密钥的Key，上面已经填了，不填</p></li><li><p>SSH Servers<br> Name  -&gt;  给这个服务器取个名字，随便写<br> Hostname  -&gt;  远程主机IP<br> Username  -&gt;  登录阿里的用户名<br> Remote Directory  -&gt;  链接后指定阿里远程的根目录<br> Use password authentication, or use a different key  -&gt;  已通过ssh实现免密码登录，不勾选<br> Jump host  -&gt;  跳板机的IP 没有就不填<br> Port  -&gt;  通过ssh登录的端口号，默认22</p></li><li><p>Proxy type<br> … 没代理 就不填</p></li></ul></li><li><p>点击右下角的【Test Configuration】按钮，如果出来【Success】，那么恭喜你，你的jenkins与你的阿里服务器已经成功打通了</p></li></ul><p>SSH与任务关联</p><ul><li><p>打开jenkins控制台，找到之前创建的任务名称，点击后面的小三角，选择【配置】</p></li><li><p>找到【构建后操作】，点击【增加构建后操作步骤】，选择【Send build artifacts over SSH】</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-083305.png" alt="image-20181012140153223"></p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-083311.png" alt="image-20181012144009934"></p><p>配置内容详解：</p><ul><li><p>SSH Server<br>  Name 之前在全局取的服务器名字，直接选择就行</p></li><li><p>Transfer Set<br>  Source files 上传到服务器的压缩包类型，我上传的是gz包，所以填**&#x2F;*.tar.gz</p><p>  Remove prefix ：要去掉的前缀，不写远程服务器的目录结构将和Source files写的一致 </p><p>  Remote directory ：写你要部署在远程服务器的那个目录地址下，不写就是SSH Servers配置里默认远程目录 </p><p>  Exec command ：传输完了要执行的命令，我这里执行了解压缩和解压缩完成后删除压缩包2个命令</p></li></ul><hr><p>重点解释下<code>Remote directory</code>和<code>Exec command</code>两个输入框的内容</p><p><strong>1)  Remote directory</strong></p><p>填入<code>&#39;kim/master/&#39;yyyyMMdd_HH</code>的意义：</p><p>需特别注意<code>master</code>和<code>yyyyMMdd_HH</code>。</p><p>a. 将打包后的dist.tar.gz包放到阿里远程目录的<code>/home/ww/kim/master/yyyyMMdd_HH</code>中<br>b. yyyyMMdd_HH是动态值，通过获取上传时服务器时间年月日时，生成的目录<br>c. 一定要点击<code>高级</code>，然后勾选上<code>Remote directory is a date format</code>，表示远程目录是需要格式化时间的。</p><p>还要用到动态获取日期来生成目录，还有就是master有什么好注意的？</p><p>我来说说这里面的缘由：<br>在配置服务器目录的时候，一定要想到扩展性和维护性。<br>首先公司里面可能会有许多产品和项目，那么肯定需要进行整理和分类。<br><code>一个任务只能对应一个项目，一个项目可能有正式环境和测试环境两个。</code><br>那么服务器下面的目录结构大致应该是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">   项目一</span><br><span class="line">     正式部署</span><br><span class="line">     测试部署</span><br><span class="line">   项目二</span><br><span class="line">     正式部署</span><br><span class="line">     测试部署</span><br><span class="line">   项目三</span><br><span class="line">     正式部署</span><br><span class="line">     测试部署</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure><p>这样的结构看上去还OK，但是<code>每个项目可能会进行多次迭代，如果有问题，想进行版本回退该怎么办？</code></p><p>于是乎目录结构应该是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">项目一/</span><br><span class="line">    正式/</span><br><span class="line">        正式部署</span><br><span class="line">        正式目录/包</span><br><span class="line">        正式目录/包</span><br><span class="line">    测试/</span><br><span class="line">        测试部署</span><br><span class="line">        测试目录/包</span><br><span class="line">        测试目录/包</span><br><span class="line">项目二/</span><br><span class="line">    正式/</span><br><span class="line">        正式部署</span><br><span class="line">        正式目录/包</span><br><span class="line">        正式目录/包</span><br><span class="line">    测试/</span><br><span class="line">        测试部署</span><br><span class="line">        测试目录/包</span><br><span class="line">        测试目录/包</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p> 以我的目录结构为例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">正式环境和测试环境：</span><br><span class="line"> kim/ 项目名</span><br><span class="line">     master/ 正式</span><br><span class="line">         dist 正式部署</span><br><span class="line">         20180703_00/dist.tar.gz 上传的gz压缩包目录</span><br><span class="line">         20180703_16/dist.tar.gz </span><br><span class="line">         20180706_19/dist.tar.gz</span><br><span class="line">     develop/ 测试</span><br><span class="line">         dist 测试部署</span><br><span class="line">         20180702_19/dist.tar.gz 上传的gz压缩包目录</span><br><span class="line">         20180703_00/dist.tar.gz </span><br><span class="line">         20180706_15/dist.tar.gz</span><br></pre></td></tr></table></figure><p> 这样做的话，如果正式部署的时候线上出了问题，比如20180706_19发布的包有问题，想回退的话，直接解压之前20180703_16的包，替换dist即可。</p><p><strong>2) Exec command</strong></p><p>该输入框内可以输入一条命令，比如实现解压包之类的操作等。</p><p>但是我这边上传的gz压缩包目录是动态的（按服务器年月日_时的形式），所以想解压gz压缩包的时候也需要<code>先获取当前服务器的年月日时</code>，找到该目录，才能实现解压。</p><p>命令：<code>sh /home/originCode/crontab/zxvf_git.sh</code></p><p>表示<code>构建成功后，执行阿里服务器下/home/originCode/crontab/zxvf_git.sh里面的程序</code>。在<code>zxvf_git.sh</code>文件里面，保存的内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dateformat=<span class="string">&quot;`date +%Y%m%d_%H`&quot;</span></span><br><span class="line"> tar zxvf <span class="string">&quot;/home/originCode/kim/master/<span class="variable">$dateformat</span>/dist.tar.gz&quot;</span> -C <span class="string">&quot;/home/originCode/kim/master&quot;</span></span><br></pre></td></tr></table></figure><p>  zxvf_git.sh里面的程序实现了<code>解压刚刚上传成功的dist.tar.gz包到master目录</code>这个功能。</p><p>至此，jenkins构建内容就全部结束了，试试<code>立即构建</code>看下效果吧，最后一句话总结这个阶段究竟做了什么事：</p><blockquote><p>jenkins配置全局SSH，通过SSH配置相应的任务，任务命令需与阿里服务器配合</p></blockquote><hr></li></ul></li><li><p><strong>配置Jenkins的邮件通知</strong></p></li></ol><ul><li><p>进入【系统设置】</p></li><li><p>这是Jenkins地址和管理员邮箱（不设置管理员邮箱无法发送邮件）</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-084133.png" alt="image-20181012150348528"></p></li><li><p>配置系统管理的邮件属性</p><ul><li><p>点击【高级】</p></li><li><p>配置系统管理员的邮件属性</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-071125.png"></p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-084147.png" alt="image-20181012151455236"></p><p>详解：</p><ul><li><p>Default Content Type：邮件内容格式，可选Plain text和HTML。</p></li><li><p>Default Recipients：默认的收件人列表，用逗号分隔。抄送或密送某个收件人可以在其邮箱前面加上cc:或bcc:。</p></li><li><p>Default Subject：默认的邮件标题。</p></li><li><p>Default Content：默认的邮件内容。</p></li><li><p>Enable Debug Mode：开启插件的Debug模式，在日志里能看到更多信息。</p></li></ul></li></ul><p> 在此贴出邮件文本内容：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>$&#123;ENV, var=&quot;JOB_NAME&quot;&#125;-第$&#123;BUILD_NUMBER&#125;次构建日志<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">leftmargin</span>=<span class="string">&quot;8&quot;</span> <span class="attr">marginwidth</span>=<span class="string">&quot;0&quot;</span> <span class="attr">topmargin</span>=<span class="string">&quot;8&quot;</span> <span class="attr">marginheight</span>=<span class="string">&quot;4&quot;</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">offset</span>=<span class="string">&quot;0&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;95%&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>  <span class="attr">style</span>=<span class="string">&quot;font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>各位同事，大家好，以下为$&#123;PROJECT_NAME &#125;项目构建信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#0B610B&quot;</span>&gt;</span>构建信息<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span>  </span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目名称 ： $&#123;PROJECT_NAME&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建编号 ： 第$&#123;BUILD_NUMBER&#125;次构建<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>触发原因： $&#123;CAUSE&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建状态： $&#123;BUILD_STATUS&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建日志： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;BUILD_URL&#125;console&quot;</span>&gt;</span>$&#123;BUILD_URL&#125;console<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建  Url ： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;BUILD_URL&#125;&quot;</span>&gt;</span>$&#123;BUILD_URL&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>工作目录 ： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;PROJECT_URL&#125;ws&quot;</span>&gt;</span>$&#123;PROJECT_URL&#125;ws<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目  Url ： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;PROJECT_URL&#125;&quot;</span>&gt;</span>$&#123;PROJECT_URL&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>  </span><br></pre></td></tr></table></figure><ul><li><p>配置【邮件通知】</p><ul><li><p>点击【高级】</p></li><li><p>配置</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-084153.png" alt="image-20181012151617371"></p></li></ul></li><li><p>进入具体的某一个任务中配置邮件通知</p><ul><li><p>进入任务配置</p></li><li><p>拉到最后面，有一个【增加构建后操作步骤】的选项，选择圈起来的两个</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-084159.png" alt="image-20181012151942706"></p></li><li><p>填写对应的信息</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-084207.png" alt="image-20181012152100966"></p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-084211.png" alt="image-20181012152149843"></p><p>其中有一个【Triggers】配置，是配置什么时候触发邮件的发送，可以自行选择</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-084217.png" alt="image-20181012152317166"></p><p>详解：</p><ul><li>Attach Build Log：是否发送构建日志</li><li>Always：每次构建后都发送邮件，不论构建是否成功</li><li>Before Build ：构建之前发送</li><li>Failure-Any ：构建失败时发送</li><li>Failure-1st ：构建由成功变成失败时发送（前一次构建成功，本次构建失败）</li><li>Success ：构建成功时发送</li><li>再选择Trigger对应的收件人：</li><li>Recipient List ：项目默认的收件人列表，也可在高级选项中配置对应触发器的收件人</li><li>Requestor ：此次构建的发起用户（需要给用户配置邮箱，经测试只适用于手动构建）</li></ul></li></ul></li><li><p>邮件配置后效果图</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-084225.png" alt="image-20181012160327280"></p></li></ul></li></ul><h3 id="常见问题-1"><a href="#常见问题-1" class="headerlink" title="常见问题"></a>常见问题</h3><ol><li><p>docker内 时区错误</p><p>服务器时间：</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-11-081425.png" alt="image-20181011160902340"></p><p>Docker内的时间：</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-11-081419.png" alt="image-20181011160939901"></p><p>可以发现，相隔了8个小时</p><p>CST应该是指（China Shanghai Time，东八区时间） </p><p>UTC应该是指（Coordinated Universal Time，标准时间） </p><p>所以，这2个时间实际上应该相差8个小时。</p><p>所以，必须统一两者的时区。</p><p><strong>解决办法</strong>：</p><p>​删除原先的软连接：<code>rm -rf /etc/localtime</code></p><p>​然后重新创建软链接至正确的时区：<code>ln -s /usr/share/zoneinfo/Asia/Shanghai</code></p><p>​创建文件：<code>vi /etc/timezone</code></p><p>​添加内容：<code>Asia/Shanghai</code></p><p>​重启启动docker：<code>docker restart containerName</code></p><p>​（PS：确保docker run命令中有： <code>-v /etc/timezone:/etc/timezone -v /etc/localtime:/etc/localtime</code>）</p><p>设置好后，可以在jenkins页面的右下方查看是否正确。</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-11-081601.png" alt="image-20181011161556846"></p></li><li><p>gitlab使用webhook向jenkins发送请求，报错 Requests to the local network are not allowed。</p><p> gitlab 10.6 版本以后为了安全，不允许向本地网络发送webhook请求，如果想向本地网络发送webhook请求，则需要使用管理员帐号登录，默认管理员帐号是<a href="mailto:&#x61;&#100;&#x6d;&#105;&#x6e;&#x40;&#x65;&#x78;&#97;&#109;&#x70;&#108;&#101;&#46;&#x63;&#x6f;&#x6d;">&#x61;&#100;&#x6d;&#105;&#x6e;&#x40;&#x65;&#x78;&#97;&#109;&#x70;&#108;&#101;&#46;&#x63;&#x6f;&#x6d;</a>，密码就是你gitlab搭建好之后第一次输入的密码，登录之后， 点击Configure Gitlab ，如下图所示</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-084257.png" alt="image-20181011171212412"></p><p>即可进入Admin area，在Admin area中，在【settings】标签下面，找到【OutBound Request】，勾选上【Allow requests to the local network from hooks and services】 ，保存更改即可解决问题</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-12-084303.png" alt="image-20181011171313762"></p></li><li><p>如何配置免密登录？</p><p>可以参考如下文章：</p></li></ol><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h3><ol><li><p><strong>导入image (import)</strong></p><p><code>docker import sample.tar.gz sample:v1.0</code></p></li><li><p><strong>查看images (images)</strong></p><p><code>docker images</code></p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-11-030058.png" alt="image-20181010152623820"></p></li><li><p><strong>查看image历史记录（history）</strong></p><p><code>docker history IMAGEID</code></p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-11-030054.png" alt="image-20181010152906695"></p></li><li><p><strong>运行容器(run)</strong></p><p><code>docker run -idt sample:v1.0 /bin/bash</code></p></li><li><p><strong>连接到指定容器console(attach)</strong></p><p><code>docker ps -a</code></p><p><code>docker attach f7cd476208ec(CONTAINER ID)</code></p></li><li><p><strong>查看容器(ps,top)</strong></p><p><code>docker ps -a</code>  查看全部容器</p><p><code>docker ps</code> 查看正在运行的容器</p><p><code>docker top containerName</code></p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-11-030046.png" alt="image-20181010155253469"></p></li><li><p><strong>容器重命名(rename)</strong></p><p><code>docker rename contianerId containerName</code></p></li><li><p><strong>实时资源状态(stats)</strong></p><p><code>docker stats</code></p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-11-030037.png" alt="image-20181010155545172"></p></li><li><p><strong>停止容器(stop)</strong></p><p><code>docker stop containerName</code></p></li><li><p><strong>强制摧毁容器(kill)</strong></p><p><code>docker kill containerId</code></p><p><code>docker kill $(docker ps -a -q)</code>   #kill掉所有</p></li><li><p><strong>导出容器(export)</strong></p><p><code>docker export containerId|xz - &gt;sample.xz</code></p></li><li><p><strong>容器另存为镜像(commit)</strong></p><p><code>docker commit containerId newname</code></p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-11-025052.png" alt="image-20181011103701874"></p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-11-024212.png"></p></li><li><p><strong>导出image(save)</strong></p><p><code>docker images</code></p><p><code>docker save $(docker images -q)|xz - &gt;sample.xz</code></p></li><li><p><strong>载入image(load)</strong></p><p><code>docker load -i elasticsearch.xz</code> </p><p><strong>PS:</strong> load是载入save出来的image,如果用import来导入save出来的image可能会出现问题</p></li><li><p><strong>标记标签（tag）</strong></p><p><code>docker tag containerId &gt;sample:2.3.2</code></p></li><li><p><strong>copy文件(cp)</strong></p><p><code>docker cp client:/usr/</code> </p></li><li><p><strong>暂停容器(pause)</strong></p><p><code>docker pause containerId</code></p></li><li><p><strong>恢复暂停容器(unpause)</strong></p><p><code>docker unpause containerId</code></p></li><li><p><strong>删除容器(rm)</strong></p><p><code>docker rm -f containerName</code></p></li><li><p><strong>删除image(rmi)</strong></p><p><code>docker rmi -f containerId</code></p></li><li><p><strong>查看容器日志(logs)</strong></p><p><code>docker logs</code></p></li><li><p><strong>docker环境基本信息(info)</strong></p><p><code>docker info</code></p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-11-034432.png"></p></li><li><p><strong>查看容器或镜像配置(inspect)</strong></p><p><code>docker inspect containerId</code></p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-10-11-034744.png" alt="image-20181011114705160"></p></li></ol><h3 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h3><h4 id="分支类："><a href="#分支类：" class="headerlink" title="分支类："></a>分支类：</h4><blockquote><ul><li>分支有怎么多操作，好复杂的感觉，那为什么需要分支呢？<ul><li>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程会更安全。</li></ul></li></ul></blockquote><ol><li><p><strong>查看本地分支</strong></p><p><code>git branch</code></p></li><li><p><strong>查看本地和远程分支</strong>：</p><p><code>git branch -a</code></p></li><li><p><strong>创建分支</strong></p><p><code>git branch dev</code></p></li><li><p><strong>切换分支</strong></p><p><code>git checkout develop</code></p></li><li><p><strong>绑定分支</strong></p><p><code>git branch --set-upstream-to=origin/develop develop</code></p></li><li><p><strong>创建切换分支</strong></p><p><code>git checkout -b dev</code></p></li><li><p><strong>创建切换分支</strong></p><p><code>git checkout -b devlop origin/develop</code></p></li><li><p><strong>删除分支</strong></p><p><code>git branch -d dev</code></p></li><li><p><strong>合并某分支到当前分支（删除某分支）</strong></p><p><code>git merge -d dev</code></p></li><li><p><strong>合并某分支到当前分支（不删除某分支）</strong></p><p><code>git merge --no-ff -m &quot;commit info&quot; dev</code></p></li></ol><h4 id="流程操作类："><a href="#流程操作类：" class="headerlink" title="流程操作类："></a>流程操作类：</h4><ol><li><p><strong>查看仓库当前状态</strong></p><p><code>git status</code></p></li><li><p><strong>仓库修改状态</strong></p><p><code>git diff</code></p></li><li><p><strong>查看分支合并图</strong></p><p><code>git log --graph</code></p></li><li><p><strong>查看大致内容</strong></p><p><code>git log --oneline</code></p></li><li><p><strong>查看详细内容</strong></p><p><code>git log --pretty=raw</code></p></li></ol><h4 id="推送操作流程："><a href="#推送操作流程：" class="headerlink" title="推送操作流程："></a>推送操作流程：</h4><ol><li><p><strong>将所有修改添加到暂存区</strong></p><p><code>git add .</code></p></li><li><p><strong>提交到存储库</strong></p><p><code>git commit -m &quot;commit info&quot;</code></p></li><li><p><strong>推送到远程仓库</strong></p><p><code>git push</code></p></li></ol><h4 id="其他操作："><a href="#其他操作：" class="headerlink" title="其他操作："></a>其他操作：</h4><ol><li><p><strong>更新远程仓库所有分支到本地合并</strong></p><p><code>git pull</code></p></li><li><p><strong>回退到上个&#x2F;上上个&#x2F;上上上个版本</strong></p><p><code>git reset --hard HEAD / HEAD^ / HEAD~2</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> gitlab </tag>
            
            <tag> jenkins </tag>
            
            <tag> 持续集成 </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>升级Jenkins的方法</title>
      <link href="/2018/10/06/docker-jenkins-update/"/>
      <url>/2018/10/06/docker-jenkins-update/</url>
      
        <content type="html"><![CDATA[<h1 id="升级Jenkins"><a href="#升级Jenkins" class="headerlink" title="升级Jenkins"></a>升级Jenkins</h1><blockquote><p>打开jenkins提示可以升级，于是按照提示点击下载，得到一个war包</p></blockquote><h2 id="docker环境下"><a href="#docker环境下" class="headerlink" title="docker环境下"></a>docker环境下</h2><p>1. </p><p>   获取容器PID</p><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect -f &#123;&#123;.State.Pid&#125;&#125;</span><br></pre></td></tr></table></figure></code></pre><p>   进入到jenkins容器</p><p>   <code>nsenter --target [容器pid]  --mount --uts --ipc --net --pid</code></p><p>2. </p><p>   ps -aux | grep jenkins 查看jenkins安装路径</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1000      8171  4.5 12.8 5691012 1028412 ?     Sl   22:31   0:49 java -jar /usr/share/jenkins/jenkins.war</span><br></pre></td></tr></table></figure><p>3. </p><p>   <code>cd /usr/share/jenkins/</code> 进入jenkins目录</p><p>4. </p><p>   <code>cp jenkins.war jenkins.war.bak</code> 备份一下，出问题时可以恢复</p><p>5. </p><p>   <code>wget 下载链接</code> （就是jenkins里提示的下载按钮的链接地址）</p><p>6. </p><p>   删除原来的<code>jenkins.war</code> 下载下来的是<code>jenkins.war.1</code> 重命名为<code>jenkins.war</code>即可：</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">rm</span> jenkins.war; </span><br><span class="line">$ <span class="built_in">mv</span> jenkins.war.1 jenkins.war</span><br></pre></td></tr></table></figure><p>7. </p><p>   完成之后exit退出容器，重启容器，<code>docker restart [容器id]</code></p>]]></content>
      
      
      <categories>
          
          <category> jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> jenkins </tag>
            
            <tag> 更新 </tag>
            
            <tag> 升级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dcoker的基本操作</title>
      <link href="/2018/10/06/docer-operate/"/>
      <url>/2018/10/06/docer-operate/</url>
      
        <content type="html"><![CDATA[<h1 id="Dcoker的基本操作"><a href="#Dcoker的基本操作" class="headerlink" title="Dcoker的基本操作"></a>Dcoker的基本操作</h1><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">$ yum install -y docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line">$ sudo service docker start</span><br><span class="line"></span><br><span class="line"><span class="comment">#版本</span></span><br><span class="line">$ docker version</span><br><span class="line"></span><br><span class="line"><span class="comment">#导出镜像</span></span><br><span class="line">$ docker save docker.io/jenkins &gt; /home/jenkins.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#导入镜像</span></span><br><span class="line">$ docker load &lt; /home/jenkins.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看镜像</span></span><br><span class="line">$ docker images</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除镜像</span></span><br><span class="line">$ docker rmi docker.io/jenkins</span><br><span class="line"></span><br><span class="line"><span class="comment">#暂停容器</span></span><br><span class="line">$ docker pause jenkins</span><br><span class="line"></span><br><span class="line"><span class="comment">#恢复容器</span></span><br><span class="line">$ docker unpause jenkis</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止容器</span></span><br><span class="line">$ docker stop jenkins</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动容器</span></span><br><span class="line">$ docker run ......</span><br></pre></td></tr></table></figure><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><h4 id="nsenter使用"><a href="#nsenter使用" class="headerlink" title="nsenter使用"></a>nsenter使用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker inspect -f &#123;&#123;.State.Pid&#125;&#125; 容器名或者容器<span class="built_in">id</span>   <span class="comment">#每一个容器都有.State.Pid，所以这个命令除了容器的id需要我们根据docker ps -a去查找，其他的全部为固定的格式</span></span><br><span class="line">$ nsenter --target 上面查到的进程<span class="built_in">id</span> --mount --uts --ipc --net --pid  <span class="comment">#输入该命令便进入到容器中</span></span><br></pre></td></tr></table></figure><p>解释nsenter指令中进程id之后的参数的含义： </p><ul><li>–mount参数是进去到mount namespace中 </li><li>–uts参数是进入到uts namespace中 </li><li>–ipc参数是进入到System V IPC namaspace中 </li><li>–net参数是进入到network namespace中 </li><li>–pid参数是进入到pid namespace中 </li><li>–user参数是进入到user namespace中</li></ul><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><h4 id="docker-exec的使用"><a href="#docker-exec的使用" class="headerlink" title="docker exec的使用"></a>docker exec的使用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#gitlab是刚刚指定的Gitlab名称</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it gitlab /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="comment">#docker ps(查看容器)</span></span><br><span class="line"><span class="comment">#执行后CONTAINER ID也能进入</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it 3c26d1799845 bash</span><br></pre></td></tr></table></figure><h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><pre><code class="bash">#停止gitlab$ docker stop &lt;容器的ID或者容器的名字&gt;#启动gitlab$ docker start &lt;容器的ID或者容器的名字&gt;#重启容器$ docker restart &lt;容器的ID或者容器的名字&gt;#删除gitlab$ docker rm &lt;容器的ID或者容器的名字&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>oh my zsh无法更新</title>
      <link href="/2018/08/22/update-ohmyzsh/"/>
      <url>/2018/08/22/update-ohmyzsh/</url>
      
        <content type="html"><![CDATA[<h1 id="oh-my-zsh无法更新"><a href="#oh-my-zsh无法更新" class="headerlink" title="oh my zsh无法更新"></a>oh my zsh无法更新</h1><h2 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">error</span>: cannot pull <span class="keyword">with</span> <span class="attr">rebase</span>: <span class="title class_">You</span> have unstaged changes.</span><br><span class="line"><span class="attr">error</span>: please commit or stash them.</span><br></pre></td></tr></table></figure><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~<span class="regexp">/.oh-my-zsh/</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;commit message&quot;</span></span><br><span class="line">upgrade_oh_my_zsh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> terminal </tag>
            
            <tag> xterm2 </tag>
            
            <tag> 主题美化 </tag>
            
            <tag> oh my zsh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript的重载</title>
      <link href="/2018/06/01/javascript-overloading/"/>
      <url>/2018/06/01/javascript-overloading/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript-的重载"><a href="#Javascript-的重载" class="headerlink" title="Javascript 的重载"></a>Javascript 的重载</h1><h2 id="什么是重载"><a href="#什么是重载" class="headerlink" title="什么是重载"></a>什么是重载</h2><p>​所谓重载就是一组具有相同名字，不同参数个数的函数，可以根据传入的不同参数个数，来决定使用不同的函数。</p><p>​理论上来说，Javascript是没有重载的，因为后定义的函数会覆盖前面的同名函数。</p><p>​如果一定要达到重载的方法，看下面的叙述。</p><h2 id="重载方法"><a href="#重载方法" class="headerlink" title="重载方法"></a>重载方法</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p>​可以利用switch，根据传入的arguments个数，选择不同的case语句，从而来达到重载的效果，但是这种方法不可取，因为如果arguments的个数很多的话，就有点。。。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(<span class="variable language_">arguments</span>.<span class="property">length</span>)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="comment">//执行函数</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="comment">//执行函数</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//诸如此类，后面还有很多很多的case......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>​利用闭包缓存变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一次的时候：old:undefined  find0</span></span><br><span class="line"><span class="comment">// 第二次的时候：old:find0find1</span></span><br><span class="line"><span class="comment">// 类推...</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addMethod</span>(<span class="params">obj,name,func</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> old = obj[name];</span><br><span class="line">            obj[name]=<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (func.<span class="property">length</span> == <span class="variable language_">arguments</span>.<span class="property">length</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> func.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> old.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 闭包缓存变量</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">addMethod</span>(<span class="params">obj,name,func</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> old = obj[name];</span><br><span class="line">            obj[name]=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (func.<span class="property">length</span>===<span class="variable language_">arguments</span>.<span class="property">length</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> func.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> old.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> people = &#123;</span><br><span class="line">            <span class="attr">names</span>: [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>]</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> find0 = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">names</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> find1 = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> arr = <span class="variable language_">this</span>.<span class="property">names</span>;</span><br><span class="line">            <span class="keyword">let</span> res =<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; arr.<span class="property">length</span>; index++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[index]==name) &#123;</span><br><span class="line">                     res = arr[index]+<span class="string">&quot;在第&quot;</span>+index+<span class="string">&quot;位~&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                     res = <span class="string">&#x27;没有找到此人&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">addMethod</span>(people,<span class="string">&quot;find&quot;</span>,find0);</span><br><span class="line">        <span class="title function_">addMethod</span>(people,<span class="string">&quot;find&quot;</span>,find1);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(people.<span class="title function_">find</span>(<span class="string">&quot;李四&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="comment">//李四在第1位~</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>切换bash和zsh</title>
      <link href="/2018/05/27/change-bash-zsh/"/>
      <url>/2018/05/27/change-bash-zsh/</url>
      
        <content type="html"><![CDATA[<h1 id="MAC-OS下切换默认终端为zsh"><a href="#MAC-OS下切换默认终端为zsh" class="headerlink" title="MAC OS下切换默认终端为zsh"></a>MAC OS下切换默认终端为zsh</h1><h2 id="默认为bash"><a href="#默认为bash" class="headerlink" title="默认为bash"></a>默认为bash</h2><p>mac os 系统默认的终端为bash，切换该终端为zsh，可以用以下命令</p><p><code>chsh -s /bin/zsh</code></p><h2 id="默认为zsh"><a href="#默认为zsh" class="headerlink" title="默认为zsh"></a>默认为zsh</h2><p>如过要切回默认终端bash则使用以下命令</p><p><code>chsh -s /bin/bash</code></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> terminal </tag>
            
            <tag> xterm2 </tag>
            
            <tag> 主题美化 </tag>
            
            <tag> zsh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>终端中设置彩色的欢迎图案</title>
      <link href="/2018/05/27/bash-color/"/>
      <url>/2018/05/27/bash-color/</url>
      
        <content type="html"><![CDATA[<h1 id="终端中设置彩色的欢迎图案"><a href="#终端中设置彩色的欢迎图案" class="headerlink" title="终端中设置彩色的欢迎图案"></a>终端中设置彩色的欢迎图案</h1><h2 id="先附上效果图"><a href="#先附上效果图" class="headerlink" title="先附上效果图"></a>先附上效果图</h2><p><img src="http://kim.jtsmart-ai.com/WX20180527-171933@2x.png" alt="效果图"></p><h2 id="设置图案"><a href="#设置图案" class="headerlink" title="设置图案"></a>设置图案</h2><p>配置方法</p><ul><li>打开终端（可以command+空格键，然后输入ter自动打开终端）；</li><li>输入 cd &#x2F;etc；</li><li>输入 sudo pico motd；</li><li>然后将想要输入的图案或文字在终端中粘贴；</li><li>最后，按键：control+x ,再按y回车保存。</li></ul><p>附上自己的图案</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  ／＼／＼</span><br><span class="line"> (_人｜人_)</span><br><span class="line">   ／‥ ＼</span><br><span class="line"> ミ(_Ｙ_)ミ</span><br><span class="line">    ＞ ＜</span><br><span class="line">   (／ ＼)</span><br><span class="line">  &lt;_(   )_&gt;</span><br><span class="line">(＿＞ ― ＜＿)   保佑，永无bug!</span><br></pre></td></tr></table></figure><h2 id="设置颜色"><a href="#设置颜色" class="headerlink" title="设置颜色"></a>设置颜色</h2><h3 id="ANSI-Escape-code"><a href="#ANSI-Escape-code" class="headerlink" title="ANSI Escape code"></a>ANSI Escape code</h3><p>终端用于文本字符的输入和输出，ASCII编码中有些字符是不能用来打印显示的，比如<code>&#39;\a&#39; 0x7</code>代表响铃，<code>&#39;\n&#39; 0x0A</code> 代表换行，这些字符被称为控制符。</p><p>今天我们认识一个新的控制符 <code>&#39;\e&#39; 0x1B</code>，这个字符代表 <code>ESC</code> ，即键盘上 <code>ESC</code> 按键的作用。<code>ESC</code> 是单词 escape 的缩写，即逃逸的意思。文本中出现这个转义字符，代表其后方的字符是ANSI Escape code编码。</p><p>ANSI Escape code编码中有专门控制字符颜色的控制符，例如：<code>\e[37;44;4;1m</code></p><ul><li><code>\e</code> 代表开始ANSI Escape code</li><li><code>[</code> 代表转义序列开始符 CSI，Control Sequence Introducer</li><li><code>37;44;4;1</code> 代表以<code>;</code> 分隔的文本样式控制符，其中 37 代表文本前景色为白色，44代表背景为蓝色，4代表下划线，1代表加粗</li><li><code>m</code> 代表结束控制符序列</li></ul><p>运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\e[37;44;4;1mMCC\e[0m&quot;</span></span><br></pre></td></tr></table></figure><p>因为 <code>\e</code> 控制符的16进制码为 <code>0x1B</code> ， 8 进制码为 <code>033</code> ，所以以下表示方式等价：</p><ul><li><code>\e[37;44;4;1mMCC\e[0m</code></li><li><code>\x1b[37;44;4;1mMCC\x1b[0m</code></li><li><code>\x1B[37;44;4;1mMCC\x1B[0m</code></li><li><code>\033[37;44;4;1mMCC\033[0m</code></li></ul><p>这里我们使用最后一种8进制码(下文内容均使用8进制码)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[37;44;4;1mMCC\033[0m&quot;</span></span><br></pre></td></tr></table></figure><p><img src="http://kim.jtsmart-ai.com/WX20180527-200252@2x.png"></p><h3 id="常用文本样式控制符"><a href="#常用文本样式控制符" class="headerlink" title="常用文本样式控制符"></a>常用文本样式控制符</h3><table><thead><tr><th>编码</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>重置、清除样式</td></tr><tr><td>1</td><td>加粗</td></tr><tr><td>3</td><td>斜体</td></tr><tr><td>4</td><td>下划线</td></tr><tr><td>5</td><td>闪烁</td></tr><tr><td>8</td><td>隐藏</td></tr><tr><td>30~37</td><td>前景色，参考下文 《1 位颜色编码》</td></tr><tr><td>38</td><td>设置前景色，后跟<code> 5;n</code>代表使用8位256颜色码，后跟<code> 2;r;g;b</code>代表24位RGB颜色码</td></tr><tr><td>40~47</td><td>背景色《1 位颜色编码》</td></tr><tr><td>48</td><td>设置背景色，后跟<code> 5;n</code>代表使用8位256颜色码，后跟<code> 2;r;g;b</code>代表24位RGB颜色码</td></tr><tr><td>90~97</td><td>亮色前景色，参考下文 《1 位颜色编码》</td></tr><tr><td>100~107</td><td>亮色背景，参考下文 《1 位颜色编码》</td></tr></tbody></table><h4 id="1位颜色编码"><a href="#1位颜色编码" class="headerlink" title="1位颜色编码"></a>1位颜色编码</h4><table><thead><tr><th>颜色</th><th>前景色编码</th><th>背景色编码</th></tr></thead><tbody><tr><td>黑色</td><td>30</td><td>40</td></tr><tr><td>红色</td><td>31</td><td>41</td></tr><tr><td>绿色</td><td>32</td><td>42</td></tr><tr><td>黄色</td><td>33</td><td>43</td></tr><tr><td>蓝色</td><td>34</td><td>44</td></tr><tr><td>品红色</td><td>35</td><td>45</td></tr><tr><td>青色</td><td>36</td><td>46</td></tr><tr><td>白色 (灰)</td><td>37</td><td>47</td></tr><tr><td>亮黑色 (灰)</td><td>90</td><td>100</td></tr><tr><td>亮红色</td><td>91</td><td>101</td></tr><tr><td>亮绿色</td><td>92</td><td>102</td></tr><tr><td>亮黄色</td><td>93</td><td>103</td></tr><tr><td>亮蓝色</td><td>94</td><td>104</td></tr><tr><td>亮品红色</td><td>95</td><td>105</td></tr><tr><td>亮青色</td><td>96</td><td>106</td></tr><tr><td>亮白色</td><td>97</td><td>107</td></tr></tbody></table><h4 id="8位-256颜色码"><a href="#8位-256颜色码" class="headerlink" title="8位 256颜色码"></a>8位 256颜色码</h4><p><img src="http://kim.jtsmart-ai.com/2148762324-5a4b00a43cb4b.png" alt="256-color-mode tabale"></p><h4 id="xterm-256颜色码"><a href="#xterm-256颜色码" class="headerlink" title="xterm 256颜色码"></a>xterm 256颜色码</h4><p><img src="http://kim.jtsmart-ai.com/Xterm_color_chart.png" alt="xterm颜色"></p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><code>\033[31m</code> 红色</p><p><code>\033[38;5;31mA</code> 8位表示青色</p><p><code>\033[31;5;1;4m</code> 闪烁的红色加粗带下划线字体</p><p><img src="http://kim.jtsmart-ai.com/WX20180527-200230@2x.png"></p><h3 id="设置方法1"><a href="#设置方法1" class="headerlink" title="设置方法1"></a>设置方法1</h3><p>可以编写一个sh文件，来完成有颜色的图案的产生</p><h4 id="sh文件示例："><a href="#sh文件示例：" class="headerlink" title="sh文件示例："></a>sh文件示例：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Message of the Day filename</span></span><br><span class="line">MOTD=<span class="string">&quot;/etc/motd&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Text Color Variables</span></span><br><span class="line">CY1=<span class="string">&quot;\033[38;5;196m&quot;</span>    <span class="comment">#颜色可以自己定义</span></span><br><span class="line">CY2=<span class="string">&quot;\033[38;5;197m&quot;</span>    </span><br><span class="line">CY3=<span class="string">&quot;\033[38;5;198m&quot;</span>    </span><br><span class="line">CY4=<span class="string">&quot;\033[38;5;199m&quot;</span>    </span><br><span class="line">CY5=<span class="string">&quot;\033[38;5;210m&quot;</span>    </span><br><span class="line">CY6=<span class="string">&quot;\033[38;5;209m&quot;</span>    </span><br><span class="line">CY7=<span class="string">&quot;\033[38;5;208m&quot;</span>    </span><br><span class="line">CY8=<span class="string">&quot;\033[38;5;172m&quot;</span>    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RESET=<span class="string">&quot;\033[0m&quot;</span></span><br><span class="line"></span><br><span class="line">clear &gt; <span class="variable">$MOTD</span>        <span class="comment"># removes all text from /etc/motd</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;&quot;</span> &gt;&gt; <span class="variable">$MOTD</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="variable">$CY1</span><span class="string">&quot;   ／＼／＼&quot;</span> &gt;&gt; <span class="variable">$MOTD</span><span class="comment">#一行一个颜色一个图案</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="variable">$CY2</span><span class="string">&quot;  (_人｜人_)&quot;</span> &gt;&gt; <span class="variable">$MOTD</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="variable">$CY3</span><span class="string">&quot;    ／‥ ＼&quot;</span> &gt;&gt; <span class="variable">$MOTD</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="variable">$CY4</span><span class="string">&quot;  ミ(_Ｙ_)ミ&quot;</span> &gt;&gt; <span class="variable">$MOTD</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="variable">$CY5</span><span class="string">&quot;     ＞ ＜&quot;</span> &gt;&gt; <span class="variable">$MOTD</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="variable">$CY6</span><span class="string">&quot;    (／ ＼)&quot;</span> &gt;&gt; <span class="variable">$MOTD</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="variable">$CY7</span><span class="string">&quot;   &lt;_(   )_&gt;&quot;</span> &gt;&gt; <span class="variable">$MOTD</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="variable">$CY8</span><span class="string">&quot; (＿＞ ― ＜＿)   保佑，永无bug!&quot;</span> &gt;&gt; <span class="variable">$MOTD</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;&quot;</span> &gt;&gt; <span class="variable">$MOTD</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="variable">$RESET</span> &gt;&gt; <span class="variable">$MOTD</span></span><br></pre></td></tr></table></figure><p>保存后，执行文件</p><ul><li>注意文件的权限，要加上chmod u+x file.sh</li><li>执行的时候加上sudo，即：sudo .&#x2F;file.sh</li></ul><h3 id="设置方法2"><a href="#设置方法2" class="headerlink" title="设置方法2"></a>设置方法2</h3><p>可以直接更改&#x2F;ect&#x2F;motd</p><p>在图案前面加上<code>^[[38;5;196m</code>（按照上述的颜色表对照）各种颜色的设置也是可以达到要求的</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>各种字符图案网址：<a href="http://www.asciiworld.com/">http://www.asciiworld.com</a></p><p>参考资料：<a href="https://segmentfault.com/a/1190000012666612">https://segmentfault.com/a/1190000012666612</a></p><p>参考资料：<a href="http://unixrevolution.blogspot.com/2011/11/motd-with-colors-also-applies-to-shell.html">http://unixrevolution.blogspot.com/2011/11/motd-with-colors-also-applies-to-shell.html</a></p><p>参考资料：<a href="http://midactstech.blogspot.com/2013/11/how-to-add-color-to-your-motd.html">http://midactstech.blogspot.com/2013/11/how-to-add-color-to-your-motd.html</a></p><p>色卡表：<a href="https://jonasjacek.github.io/colors/">https://jonasjacek.github.io/colors/</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> terminal </tag>
            
            <tag> xterm2 </tag>
            
            <tag> 主题美化 </tag>
            
            <tag> 欢迎图案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac下配置ssh免密码登陆</title>
      <link href="/2018/02/11/ssh-nopwd/"/>
      <url>/2018/02/11/ssh-nopwd/</url>
      
        <content type="html"><![CDATA[<h1 id="Mac下配置ssh免密码登陆"><a href="#Mac下配置ssh免密码登陆" class="headerlink" title="Mac下配置ssh免密码登陆"></a>Mac下配置ssh免密码登陆</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>本机：macpro</p><p>服务器：centos7</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="本机操作"><a href="#本机操作" class="headerlink" title="本机操作"></a>本机操作</h3><ol><li><p>创建本机的公钥和私钥，使用命令ssh-keygen</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;kim&quot;</span> -f <span class="string">&quot;kim_rsa&quot;</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): <span class="comment">#回车</span></span><br><span class="line">Enter same passphrase again: <span class="comment">#回车</span></span><br><span class="line">Your identification has been saved <span class="keyword">in</span> kim_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> kim_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:hflx6YALRHsFH8ka/y45ugIIsfPxZ3q+ccwm2cBgZx0 kim</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|     .o Eoo.     |</span></span><br><span class="line"><span class="string">|.    . o.Bo. .   |</span></span><br><span class="line"><span class="string">| o  o = *+= o    |</span></span><br><span class="line"><span class="string">|+ .. = o.+.=     |</span></span><br><span class="line"><span class="string">| + +  o S ...    |</span></span><br><span class="line"><span class="string">|  o o o*    .    |</span></span><br><span class="line"><span class="string">|     =+ *  o     |</span></span><br><span class="line"><span class="string">|    . o=  + .    |</span></span><br><span class="line"><span class="string">|     ooooo o     |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure><p>其中</p><ul><li>-t表示用哪种加密算法，一般使用rsa非堆成加密算法</li><li>-C表示身份，需要用“”来写</li><li>-f表示密钥输出的文件名，也需要用“”来写</li></ul><p>当然也可以直接用<code>ssh-keygen -t rsa</code>来生成，但是可能会有重复的问题，一般最好就是设置身份和文件名</p><p>完成命令后，会在当前目录下生成两个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kim_rsa<span class="comment">#生成的私钥文件，小心保存，不要泄漏</span></span><br><span class="line">kim_rsa.pub<span class="comment">#生成的公钥文件</span></span><br></pre></td></tr></table></figure></li><li><p>使私钥文件中本地生效</p><ul><li>把第一步生成的文件复制到你home目录下的.ssh文件夹目录下</li><li>配置的你私钥文件的访问权限为600</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="comment">#进入home目录下</span></span><br><span class="line">$ <span class="built_in">cd</span> .ssh <span class="comment">#进入ssh目录</span></span><br><span class="line">$ <span class="built_in">chmod</span> 600 kim_rsa <span class="comment">#更改私钥文件的权限为600</span></span><br></pre></td></tr></table></figure></li><li><p>把本机中的公钥文件复制到服务器中的.ssh&#x2F;路径下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp kim_rsa.pub root@ip_address:/root/.ssh</span><br></pre></td></tr></table></figure></li></ol><h3 id="服务器操作"><a href="#服务器操作" class="headerlink" title="服务器操作"></a>服务器操作</h3><ol><li><p>登陆到服务器中，进入.ssh&#x2F;路径下，就能看见刚刚复制过来的本机的公钥文件</p><p>ps：</p><ul><li><p>如果服务器中没有.ssh文件夹，就自己创建一个</p></li><li><p>创建后，要更改文件的权限为700</p></li><li><p>公钥文件的权限为644</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> .ssh</span><br><span class="line">$ <span class="built_in">chmod</span> 700 .ssh/</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使公钥文件中服务器中生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> kim_rsa.pub &gt;&gt; authorized_keys <span class="comment">#把公钥信息追加到authorized_keys文件中</span></span><br><span class="line">$ <span class="built_in">chmod</span> 644 authorized_keys <span class="comment">#authorized_keys文件的权限也要为644</span></span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1focchp6wncj30u204ggm5.jpg"></p></li><li><p>这样就完成了公钥的生效，退回到本机</p></li></ol><h3 id="继续本机操作"><a href="#继续本机操作" class="headerlink" title="继续本机操作"></a>继续本机操作</h3><ol><li><p>在.ssh&#x2F;目录下会有一个known_hosts(远端服务器指纹)文件，这个文件是自动生成的。当你第一次登陆服务器的时候会有询问。<strong>有一个坑的地方，当你ip更换了，免密不能登陆的时候，把文件中把ip相对应的那一条删除，保存，重新登陆，重新生成，即可。</strong></p></li><li><p>这个时候如果上述步骤都正确完成的时候，可以使用<code>ssh -i .ssh/kim_rsa ipaddress</code>来进行免密登陆。<strong>ps：用户名相对应，才可以</strong></p><p>​</p></li></ol><h4 id="别名设置"><a href="#别名设置" class="headerlink" title="别名设置"></a>别名设置</h4><ol><li><p>在.ssh&#x2F;路径下检查是否存在一个<strong>config</strong>文件，如果不存在就创建一个</p></li><li><p>编辑config文件，添加以下内容，保存并关闭：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#单主机配置</span></span><br><span class="line">Host kim<span class="comment">#别名</span></span><br><span class="line">User root<span class="comment">#用户</span></span><br><span class="line">Port 22<span class="comment">#端口，默认为22</span></span><br><span class="line">HostName IP或网址<span class="comment">#服务器地址</span></span><br><span class="line">IdentityFile ~/.ssh/kim_rsa<span class="comment">#私钥文件</span></span><br><span class="line">Protocol 2</span><br><span class="line">Compression <span class="built_in">yes</span></span><br><span class="line">ServerAliveInterval 60</span><br><span class="line">ServerAliveCountMax 20</span><br><span class="line">LogLevel INFO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多主机配置</span></span><br><span class="line">Host gateway-produce</span><br><span class="line">HostName IP或网址</span><br><span class="line">Port 22</span><br><span class="line">Host node-produce</span><br><span class="line">HostName IP或网址</span><br><span class="line">Port 22</span><br><span class="line">Host java-produce</span><br><span class="line">HostName IP或网址</span><br><span class="line">Port 22</span><br><span class="line"></span><br><span class="line">Host *-produce</span><br><span class="line">User root</span><br><span class="line">IdentityFile ~/.ssh/produce_key_rsa</span><br><span class="line">Protocol 2</span><br><span class="line">Compression <span class="built_in">yes</span></span><br><span class="line">ServerAliveInterval 60</span><br><span class="line">ServerAliveCountMax 20</span><br><span class="line">LogLevel INFO</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置config文件的访问权限为644</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chomd 644 config</span><br></pre></td></tr></table></figure></li></ol><h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p>以上就能使用别名，免密码登陆ssh啦！</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1foccyinho0j30sk05mgm6.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> Mac </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于centos的一些基础命令汇合</title>
      <link href="/2018/02/10/nginx-settings/"/>
      <url>/2018/02/10/nginx-settings/</url>
      
        <content type="html"><![CDATA[<h2 id="centos7"><a href="#centos7" class="headerlink" title="centos7"></a>centos7</h2><h3 id="ip部分"><a href="#ip部分" class="headerlink" title="ip部分"></a>ip部分</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装ifconfig模块</span></span><br><span class="line">$ yum install net-tools</span><br><span class="line"></span><br><span class="line"><span class="comment">#打开网口</span></span><br><span class="line">$ vi /etc/sysconfig/network-scripts/ifcfg-eth0 </span><br><span class="line"><span class="comment">#把ONOBOOT设置为on</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以把动态IP改成静态IP，修改内容如下</span></span><br><span class="line">BOOTPROTO=<span class="string">&quot;static&quot;</span> <span class="comment">#dhcp改为static   </span></span><br><span class="line">ONBOOT=<span class="string">&quot;yes&quot;</span> <span class="comment">#开机启用本配置  </span></span><br><span class="line">IPADDR=192.168.22.22 <span class="comment">#静态IP  </span></span><br><span class="line">GATEWAY=192.168.22.1 <span class="comment">#默认网关  </span></span><br><span class="line">NETMASK=255.255.255.0 <span class="comment">#子网掩码  </span></span><br><span class="line">DNS1=192.168.22.1 <span class="comment">#DNS 配置  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看路由</span></span><br><span class="line">$ route</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启网络</span></span><br><span class="line">$ systemctl retart network.service </span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">$ systemctl restart network</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动网络</span></span><br><span class="line">$ systemctl start network.service</span><br><span class="line"><span class="comment">#或</span></span><br><span class="line">$ systemctl start network</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止网络</span></span><br><span class="line">$ systemctl stop network.service</span><br><span class="line"><span class="comment">#或</span></span><br><span class="line">$ systemctl stop network</span><br></pre></td></tr></table></figure><h3 id="防火墙部分"><a href="#防火墙部分" class="headerlink" title="防火墙部分"></a>防火墙部分</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#查看默认防火墙状态（关闭后显示notrunning，开启后显示running）</span></span><br><span class="line">$ firewall-cmd --state</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止firewall</span></span><br><span class="line">$ systemctl stop firewalld.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启firewall</span></span><br><span class="line">$ systemctl start firewalld.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭开机启动</span></span><br><span class="line">$ systemctl <span class="built_in">disable</span> firewalld.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启开机启动</span></span><br><span class="line">$ systemctl <span class="built_in">enable</span> firewalld.service</span><br><span class="line">$$$$$</span><br></pre></td></tr></table></figure><h3 id="etc部分"><a href="#etc部分" class="headerlink" title="etc部分"></a>etc部分</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#由于手贱乱改了profile文件，导致vi，yum，ls等命令都无法使用</span></span><br><span class="line">$ /bin/vi /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#把文件改回原来的样子</span></span><br><span class="line">$ reboot <span class="comment">#重启</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#或者在命令行输入</span></span><br><span class="line">$ <span class="built_in">export</span> PATH=/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line"><span class="comment">#然后重新编辑profile文件即可。-------但未测试。同样的也要重启之后才会生效！</span></span><br></pre></td></tr></table></figure><h3 id="scp部分"><a href="#scp部分" class="headerlink" title="scp部分"></a>scp部分</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从服务器下载文件</span></span><br><span class="line">$ scp username@servername:/remote_path/filename ~/local_destination</span><br><span class="line">  </span><br><span class="line"><span class="comment">#上传本地文件到服务器</span></span><br><span class="line">$ scp ~/local_path/local_filename username@servername:/remote_path  </span><br><span class="line">    </span><br><span class="line"><span class="comment">#从服务器下载整个目录</span></span><br><span class="line">$ scp -r username@servername:/remote_path/remote_dir/ ~/local_destination</span><br><span class="line">  </span><br><span class="line"><span class="comment">#上传目录到服务器</span></span><br><span class="line">$ scp  -r ~/local_dir username@servername:/remote_path/remote_dir</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> linux </tag>
            
            <tag> centos7 </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node和nginx在macos和linux的安装和一些部署要点</title>
      <link href="/2018/01/28/node-nginx-install/"/>
      <url>/2018/01/28/node-nginx-install/</url>
      
        <content type="html"><![CDATA[<h2 id="macos安装nginx"><a href="#macos安装nginx" class="headerlink" title="macos安装nginx"></a>macos安装nginx</h2><ol><li><p>打开<a href="https://brew.sh/index_zh-cn.html">https://brew.sh/index_zh-cn.html</a></p></li><li><p><code>brew search nginx</code> 查找是否支持nginx</p></li><li><p><code>brew install nginx</code> 下载nginx</p></li><li><p><code>brew info nginx</code>    nginx版本的信息</p></li><li><p><code>nginx -v</code>  查看 版本号</p></li><li><p>启动s<code>udo brew services start nginx</code>(默认端口8080)</p><ul><li><p>备注：如果安装过jenkins 这里失败</p></li><li><p><code>sudo launchctl unload/Library/LaunchDaemons/org.jenkins-ci.plist</code> 停掉 jenkins</p></li><li><p><code>systemctl start jenkins</code> 启动 jenkins</p></li></ul></li><li><p>关闭<code>sudo brew servicesstop nginx</code></p></li><li><p>打开Nginx具体安装目录 查看配置文件<code>/usr/local/etc/nginx/</code></p></li><li><p>验证配置文件 <code>nginx -t -c</code> 自己的配置文件地址</p></li><li><p>几条盖世绝学</p></li></ol><p>   <code>ps aux | grep nginx</code></p><p>   <code>Lost -i tcp:8081</code> 查看被占用端口</p><p>   <code>kill -g pid</code> 关闭进程</p><p>   <code>ssh 用户名@地址</code></p><p>   <code>scp source  root@ipaddress：/路径</code></p><p>   <code>scp -r addvance/root@ipadderss：/xxx</code></p><h2 id="centos-安装nginx"><a href="#centos-安装nginx" class="headerlink" title="centos 安装nginx"></a>centos 安装nginx</h2><ol><li><p><code>yum install wget</code></p></li><li><p><code>wget -c  http://nginx.org/download/nginx-1.12.2.tar.gz</code></p></li><li><p><code>Tar -zxvf nginx-1.12.2.tar.gz</code></p></li><li><p><code>cd nginx-1.12.2.tar.gz</code></p></li><li><p><code>./configure —prefix = /usr/local/nginx</code>  ——&gt;这边不写—prefix 默认就是&#x2F;usrlocal&#x2F;nginx。可以指定目录</p></li><li><p>可能无法编译，需要安装gcc模块。<code>yum install gcc</code></p></li><li><p>可能出现少模块，按照需求安装模块  如： <code>yum install pcre-devel</code></p></li><li><p>没有error,但是可能需要安装openssl</p><p><code>yum install openssl openssl-devel</code></p></li><li><p><code>make</code></p></li><li><p><code>make install</code></p></li><li><p>这样<code>/usr/local/nginx</code>下面就有了目录</p></li><li><p>进入sbin 启动：<code>./nginx</code></p></li><li><p>ps 查看终端<br><code>ps -ef</code> 查看所有的进程<br><code>ps -ef | grep</code> 过滤我想要查看的进程<br><code>ps -ef | grep nginx</code> 查看 nginx的进程</p></li><li><p>重启：<code>nginx -s reload</code>、停止<code>nginx-s stop</code></p></li><li><p>服务器端的 nginx 地址 <code>/usr/local/nginx/local/</code></p></li><li><p><code>npm install —production</code> 只负责加载上线环境</p></li><li><p>pm2动态监测文件</p><ul><li>能够动态的监控文件的上传。0s热启动</li><li>能够负载均衡CPU</li><li>内存的使用 过多了 CPU调度太频繁 重启</li><li>restart 个数</li></ul></li></ol><h2 id="centos配置全局nginx"><a href="#centos配置全局nginx" class="headerlink" title="centos配置全局nginx"></a>centos配置全局nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#在最后加上如下两段话</span></span><br><span class="line"><span class="comment">#nginx setting</span></span><br><span class="line"><span class="built_in">export</span> NGINX_HOME=/usr/local/nginx</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$NGINX_HOME</span>/sbin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#保存后，退出后，执行</span></span><br><span class="line">$ <span class="built_in">source</span> /etc/profile<span class="comment">#使配置生效</span></span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fobp6lkbq1j30k203qjrp.jpg"></p><h2 id="nginx一些命令"><a href="#nginx一些命令" class="headerlink" title="nginx一些命令"></a>nginx一些命令</h2><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fobpj7gy40j313c0ggjua.jpg"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1. -?, - h：显示帮助。</span><br><span class="line"></span><br><span class="line">2. -v：显示版本并退出。</span><br><span class="line"></span><br><span class="line">3. -V：显示版本和配置选项，然后退出。</span><br><span class="line"></span><br><span class="line">4. -t：测试配置并退出。</span><br><span class="line"></span><br><span class="line">5. -T：测试配置，转储并退出。</span><br><span class="line"></span><br><span class="line">6. -q：在配置测试期间禁止非错误消息。</span><br><span class="line"></span><br><span class="line">7. -s信号：向主进程发送信号：停止，退出，重新打开，重新加载。</span><br><span class="line"></span><br><span class="line">8. -p prefix：设置前缀路径（默认值：/ usr / <span class="built_in">local</span> / nginx /）。</span><br><span class="line"></span><br><span class="line">9. -c filename：设置配置文件（默认：conf / nginx.conf）。</span><br><span class="line"></span><br><span class="line">10. -g指令：从配置文件中设置全局指令。</span><br></pre></td></tr></table></figure><h2 id="linux的node的安装"><a href="#linux的node的安装" class="headerlink" title="linux的node的安装"></a>linux的node的安装</h2><ol><li><p><code>uname -a</code> 查看Linux系统位数</p></li><li><p>在官网按照系统下载nodejs程序包</p></li><li><p>上传至服务器，这边选择的路径是&#x2F;usr&#x2F;local&#x2F;</p></li><li><p>解压</p><p> <code>tar -xvf   node-v6.10.0-linux-x64.tar.xz</code>   </p></li><li><p>重命名文件夹</p><p><code>mv node-v6.10.0-linux-x64  nodejs</code> </p></li><li><p>确认一下nodejs下bin目录是否有node 和npm文件，如果有执行软连接，如果没有重新下载执行上边步骤</p></li><li><p>建立软连接，变为全局</p><p><code>ln -s /usr/local/nodejs/bin/npm /usr/local/bin/</code> </p><p><code>ln -s /usr/local/nodejs/bin/node /usr/local/bin/</code> </p></li><li><p>检查是否配置成功</p><p><code>node -v</code></p><p><code>npm -v</code></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> 安装 </tag>
            
            <tag> nodejs </tag>
            
            <tag> node </tag>
            
            <tag> 上线部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数式编程笔记</title>
      <link href="/2018/01/14/function-programing/"/>
      <url>/2018/01/14/function-programing/</url>
      
        <content type="html"><![CDATA[<h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><h2 id="范畴论-Category-Theory"><a href="#范畴论-Category-Theory" class="headerlink" title="范畴论 Category Theory"></a>范畴论 Category Theory</h2><p>范畴就是使用箭头链接的物体。</p><p>认为所有概念体系都可以抽象出一个范畴。</p><p>彼此之间只要存在概念、事物、对象等等某种关系就能定义一个“范畴”；任何事物只要找出他们之间的关系，就能定义。</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-01-10-025954.jpg"></p><p>上图中，各个点与他们之间的箭头就构成一个范畴。</p><p>箭头表示范畴成员之间的关系，叫做态射。</p><p>范畴论认为，同一个范畴的所有成员，就是不同状态的“变形“。通过态射，一个成员可以变形成另一个成员。</p><blockquote><ol><li>所有成员是一个集合</li><li>变形关系是函数</li><li>简单理解就是集合+函数</li><li>理论上通过函数，就可以从范畴的一个成员，算出其他所有的成员</li></ol></blockquote><ul><li><p>函数是一等公民</p><p>所谓一等公民，是指函数与其他数据类型一样，既可以赋值给其他变量，也可以作为参数，或者作为别的函数的返回值。</p></li><li><p>Map（映射） &amp; reduce（收纳） 是最常用的函数式编程的方法。</p></li><li><p>不可改变量。</p><p>变量不能被修改，是指所有的变量只能被赋一次的初值</p><p>在函数式编程中变量仅仅代表某个表达式</p></li><li><p>范畴是一个容器，里面含有两种东西，值和值变形的关系也就是函数。</p></li><li><p>本质上，函数式编程只是范畴论的运算方法，跟数理逻辑、微积分、行列式是同一类东西，都是数学方法，只是碰巧它能写程序而已。</p></li><li><p>为什么函数式编程的要求函数必须是纯的，不能有副作用？就是因为他是一种数学运算，原始的目的就是求值，不做其他的事情，否则就无法满足函数运算法则了</p></li></ul><h2 id="函数式编程基础理论"><a href="#函数式编程基础理论" class="headerlink" title="函数式编程基础理论"></a>函数式编程基础理论</h2><ul><li>函数式编程是有数学推演出来的</li><li>函数式编程是一种数学理论</li><li>不是用函数来编程，也不是传统的面向过程编程。目的是在与把复杂的函数合成微简单的函数（计算机理论，递归论，拉姆达演算）。运算过程尽量写成一系列的嵌套函数调用</li></ul><p>函数式编程只有表达式，不用语句，没有“副作用”，不修改状态</p><h2 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h2><ul><li><p>对于相同的输入，永远得到相同的输出，没有任何可观察的副作用，也不依赖于外部函数。</p><p>例如：</p><p>​array.slice是纯函数</p><p>​array.splice则不是纯函数</p></li></ul><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _from <span class="string">&#x27;lodash&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> sin=_.<span class="title function_">memorize</span>(<span class="function"><span class="params">x</span>=&gt;</span><span class="title class_">Math</span>.<span class="title function_">sin</span>(x));</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一次计算的时候会稍微慢一点</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="title function_">sin</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二次有了缓存，速度极快</span></span><br><span class="line"><span class="keyword">var</span> b=<span class="title function_">sin</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>纯函数不仅可以有效的降低系统的复杂度，还有很多特性，例如可缓存性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不纯的</span></span><br><span class="line"><span class="keyword">var</span> min=<span class="number">18</span>；</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">checkage</span>=age=&gt;age&gt;min;</span><br><span class="line"></span><br><span class="line"><span class="comment">//纯的</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">checkage</span>=age=&gt;age&gt;<span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解释：</span></span><br><span class="line"><span class="comment">//在不纯的版本中，checkage不仅取决于age还有依赖于外部变量min</span></span><br><span class="line"><span class="comment">//纯的checkage把关键数字18硬编码中函数内部，扩展性就比较差。可以使用柯里化</span></span><br></pre></td></tr></table></figure><h2 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h2><ul><li>传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接上面的脚本</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">checkage</span> = min=&gt;(<span class="function"><span class="params">age</span>=&gt;</span>age&gt;min);</span><br><span class="line"><span class="keyword">var</span> checkage18 = <span class="title function_">checkage</span>(<span class="number">18</span>);</span><br><span class="line"><span class="title function_">checkage18</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//柯里化之前</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">  ruturn x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>)<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//柯里化之后</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">y</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">x</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>(<span class="number">2</span>)(<span class="number">1</span>);<span class="comment">//3</span></span><br></pre></td></tr></table></figure><ul><li>柯里化湿一种“预加载”函数的方法，通过传递较少的参数，得到一个已经记住了这些参数的新函数，某种意义上讲，这是一种对参数的“缓存”，是一种非常高效的编写函数的方法。</li></ul><h2 id="函数组合Compose"><a href="#函数组合Compose" class="headerlink" title="函数组合Compose"></a>函数组合Compose</h2><p>为了解决所谓的洋葱代码如：h(g(f(x))),的嵌套问题，就需要用到“函数组合”。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">compose</span> =(<span class="params">f,g</span>)=&gt;(<span class="function"><span class="params">x</span>=&gt;</span><span class="title function_">f</span>(<span class="title function_">g</span>(x)));</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">first</span> = arr=&gt;arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">reverse</span>=arr=&gt;arr.<span class="title function_">reverse</span>();</span><br><span class="line"><span class="keyword">var</span> last=<span class="title function_">compose</span>(first,reverse);</span><br><span class="line"><span class="title function_">last</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//var first= function (arr) &#123;</span></span><br><span class="line"><span class="comment">//    return arr[0];</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//var reverse=function(arr) &#123;</span></span><br><span class="line"><span class="comment">//    return arr.reverse();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Point-Free"><a href="#Point-Free" class="headerlink" title="Point Free"></a>Point Free</h2><ul><li><p>把一些对象自带的方法转化为纯函数，不要命名转瞬即逝的中间变量。</p><p>例如：</p><p>​const f&#x3D;str&#x3D;&gt;str.toUpperCase().split(‘ ‘);</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">toUpperCase</span>=word=&gt;word.<span class="title function_">toUpperCase</span>();</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">split</span> = x =&gt;(<span class="function"><span class="params">str</span>=&gt;</span>str.<span class="title function_">split</span>(x));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f= <span class="title function_">compose</span>(<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>),toUpperCase);</span><br><span class="line"><span class="title function_">f</span>(<span class="string">&quot;abcd eft&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="声明式与命令式"><a href="#声明式与命令式" class="headerlink" title="声明式与命令式"></a>声明式与命令式</h2><ul><li>命令式代码的意思就是通过编写一条又一条的指令去让计算机执行一些动作，一般会在其中涉及到很多繁杂的细节。</li><li>声明式就要优雅多了，通过写表达式来申明想要做什么，而不是通过一步一步的指示。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//命令式</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">CEOS</span>=[];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;companies.<span class="property">length</span>;i++)&#123;</span><br><span class="line">  <span class="variable constant_">CEOS</span>.<span class="title function_">push</span>(companies[i].<span class="property">CEO</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//声明式</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">CEOS</span>=companies.<span class="title function_">map</span>(<span class="function"><span class="params">c</span>=&gt;</span>c.<span class="property">CEO</span>);</span><br></pre></td></tr></table></figure><h2 id="函数式编程优缺点"><a href="#函数式编程优缺点" class="headerlink" title="函数式编程优缺点"></a>函数式编程优缺点</h2><ul><li>声明式代码对于函数式编程又一个明显的好处，就是无副作用的纯函数，可以完全不考虑函数内部式如何实现的，专注于业务代码。优化代码的时候只要集中在这些稳定坚固的函数内部即可。</li><li>不纯的函数式代码会产生副作用或者依赖外部系统环境，使用起来总要考虑这些不干净的副作用。在复杂的系统中，就比较烦躁，</li></ul><h2 id="惰性函数-惰性求值"><a href="#惰性函数-惰性求值" class="headerlink" title="惰性函数 惰性求值"></a>惰性函数 惰性求值</h2><ul><li><p>惰性求值表示函数执行分支的时候只会做第一次调用的时候执行。在第一次调用的过程中，该函数会被覆盖为另一个按照合适方式执行的函数，这样就不用对原函数的调用在经过执行的分支，重复进行分支判断。</p><p>​</p></li></ul><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><ul><li>高阶函数是函数当参数，把传入的函数做一个封装，然后返回这个封装的函数，达到更高程度的抽象。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add=<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Math</span>(<span class="params">func,array</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">func</span>(array[<span class="number">0</span>],array[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Math</span>(add,[<span class="number">1</span>,<span class="number">2</span>]);<span class="comment">//3</span></span><br></pre></td></tr></table></figure><h2 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h2><ul><li><p>函数内部的最后一个动作是函数调用。该调用的返回值，直接返回给函数。。。。。。。</p><blockquote><p>函数调用自身叫做递归。</p><p>如果尾调用自身，叫做尾递归。</p><p>递归需要保存大量的调用记录，容易发生栈的溢出错误。</p><p>尾递归优化，将递归变成循环，那么只要保存一个调用记录，这样就避免了栈溢出的错误</p></blockquote></li></ul><h2 id="函子Functor"><a href="#函子Functor" class="headerlink" title="函子Functor"></a>函子Functor</h2><ul><li>函子是函数式编程里面最重要的数据类型，也就是基本的运算单位和功能单位。它首先是一种范畴，也就是说是一个容器，包含了值和变形关系。比较特殊的是，它的变形关系可以一次作用于每个值上，将当前容器变形成另一个容器。</li><li>任何具有map方法的数据结构，都可以当作是函子的实现</li><li>functor遵守一些特定规则的容器类型</li><li>functor是一个对于函数调用的抽象，我们赋予容器自己去调用函数的能力。把一个东西装进一个容器，只留出一个接口map给容器外面的函数，map一个函数的时候，我们可以让容器自己来运行这个函数，这样容器就可以自由的选择何时何地如何操作这个函数，以致于拥有惰性求值，错误</li></ul><h3 id="包括"><a href="#包括" class="headerlink" title="包括"></a>包括</h3><ul><li><p>of——&gt;生成新的函子，用of替换掉new方法</p></li><li><p>maybe——&gt;为了处理传入空值而存在的函子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Functor</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">val</span> = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">map</span>(<span class="params">f</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Functor</span>(<span class="title function_">f</span>(<span class="variable language_">this</span>.<span class="property">val</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Maybe</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Functor</span>&#123;</span><br><span class="line">  <span class="title function_">map</span>(<span class="params">f</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">val</span>? <span class="title class_">Maybe</span>.<span class="title function_">of</span>(<span class="variable language_">this</span>.<span class="property">val</span>) : <span class="title class_">Maybe</span>.<span class="title function_">of</span>(<span class="literal">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Maybe</span>.<span class="title function_">of</span>(<span class="literal">null</span>).<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">s</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> s.<span class="title function_">toUpperCase</span>();</span><br><span class="line">&#125;)<span class="comment">//Maybe(null);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这样就不会报错了</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>either——&gt;相当于if-else条件运算，还有left&amp;right两个值。right是默认使用的值，如果right不存在的话，就是用left值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Either</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Functor</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">left,right</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">left</span>=left;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">right</span>=right;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">map</span>(<span class="params">f</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">right</span>?</span><br><span class="line">      <span class="title class_">Either</span>.<span class="title function_">of</span>(<span class="variable language_">this</span>.<span class="property">left</span>,<span class="title function_">f</span>(<span class="variable language_">this</span>.<span class="property">right</span>)):</span><br><span class="line">      <span class="title class_">Either</span>.<span class="title function_">of</span>(<span class="title function_">f</span>(<span class="variable language_">this</span>.<span class="property">left</span>),<span class="variable language_">this</span>.<span class="property">right</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用法：</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">addOne</span>=x=&gt;x+<span class="number">1</span>;</span><br><span class="line"><span class="title class_">Either</span>.<span class="title function_">of</span>(<span class="number">5</span>,<span class="number">6</span>).<span class="title function_">map</span>(addOne);<span class="comment">//7</span></span><br><span class="line"><span class="title class_">Either</span>.<span class="title function_">of</span>(<span class="number">5</span>,<span class="literal">null</span>).<span class="title function_">map</span>(addOne);<span class="comment">//6</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>ap——&gt;函子的值可能是函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addTwo</span>(<span class="params">x</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> x+<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> A=<span class="title class_">Functor</span>.<span class="title function_">of</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> B=<span class="title class_">Functor</span>.<span class="title function_">of</span>(addTwo);</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ap</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Functor</span>&#123;</span><br><span class="line">  <span class="title function_">ap</span>(<span class="params">f</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Ap</span>.<span class="title function_">of</span>(<span class="variable language_">this</span>.<span class="title function_">val</span>(f.<span class="property">val</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用例:</span></span><br><span class="line"><span class="title class_">Ap</span>.<span class="title function_">of</span>(addTwo).<span class="title function_">ap</span>(<span class="title class_">Functor</span>.<span class="title function_">of</span>(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//对于多参数的函数，就可以从多个容器之中取值，实现函数的链式调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">y</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> x+y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Ap</span>.<span class="title function_">of</span>(add).<span class="title function_">ap</span>(<span class="title class_">Maybe</span>.<span class="title function_">of</span>(<span class="number">2</span>)).<span class="title function_">ap</span>(<span class="title class_">Maybe</span>.<span class="title function_">of</span>(<span class="number">3</span>)); <span class="comment">// Ap(5)</span></span><br><span class="line"><span class="title class_">Ap</span>.<span class="title function_">of</span>(<span class="title function_">add</span>(<span class="number">2</span>)).<span class="title function_">ap</span>(<span class="title class_">Maybe</span>.<span class="title function_">of</span>(<span class="number">3</span>));</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>IO——&gt;它的value是i一个函数。负责处理不纯的操作（IO，网络请求，DOM操作）包裹到一个函数，从而延迟这个操作的执行。IO包含的是被包裹的的操作的返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> readFile = <span class="keyword">function</span>(<span class="params">filename</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable constant_">IO</span>.<span class="title function_">of</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> fs.<span class="title function_">readFileSync</span>(filename, <span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> print = <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable constant_">IO</span>.<span class="title function_">of</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>Monad——&gt;作用是总是返回一个单层的函子。有一个flatmap方法，与map方法作用相同，唯一的区别就是如果生成了嵌套函子，他会取出后面的值，保证返回的是一个单层的容器，不会出现嵌套。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Monad</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Functor</span>&#123;</span><br><span class="line">  <span class="title function_">join</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">val</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">flapmap</span>(<span class="params">f</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">map</span>(f).<span class="title function_">join</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">其实就是把多个操作拆解之后再合并，然后执行。</span><br></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="FP-FRP"><a href="#FP-FRP" class="headerlink" title="FP FRP"></a>FP FRP</h2><ul><li>fp 函数式编程  function programing</li><li>frp 函数式响应编程。function native programing</li><li>响应式编程继承于函数式编程</li><li>上一个的输入就是下一个的输出</li></ul><p>特性：</p><ol><li>流式</li><li>异步</li><li>响应式</li><li>订阅和观察</li></ol><p>库：</p><ol><li>rx.js</li><li>cycle.js</li><li>Loads.js</li><li>Underscore.js</li><li>Ramda.js</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>函数式的三大护法：无声名，不可变，没有副作用</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.ruanyifeng.com/blog/2017/02/fp-tutorial.html">阮一峰：函数式编程入门教程</a></p><p><a href="http://blog.csdn.net/xiaobianjava/article/details/50617896">js惰性求值 惰性函数</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数式编程 </tag>
            
            <tag> javascript </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac 终端美化</title>
      <link href="/2018/01/02/terminal-color-change/"/>
      <url>/2018/01/02/terminal-color-change/</url>
      
        <content type="html"><![CDATA[<h2 id="terminal-的颜色改变"><a href="#terminal-的颜色改变" class="headerlink" title="terminal 的颜色改变"></a>terminal 的颜色改变</h2><blockquote><p>mac中的terminal中的颜色太单一，当命令多的时候一种颜色很容易晃眼，经常自己都找不到自己的命令。所以搜索到了相对满意的结果，记录一下。</p><p>当然有很多其他方法，比如iterm，zsh…</p></blockquote><ol><li>通过终端偏好设置，选择自己喜欢主题，配色和字体大小等。</li><li>写配置文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><ol start="3"><li><p>加入配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for color</span></span><br><span class="line"><span class="built_in">export</span> CLICOLOR=1</span><br><span class="line"><span class="comment"># \h:\W \u\$</span></span><br><span class="line"><span class="built_in">export</span> PS1=<span class="string">&#x27;\[\033[01;33m\]\u@\h\[\033[01;31m\] \W\$\[\033[00m\] &#x27;</span></span><br><span class="line"><span class="comment"># grep</span></span><br><span class="line"><span class="built_in">alias</span> grep=<span class="string">&#x27;grep --color=always&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>保存文件</p></li><li><p>重新打开终端</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2018-01-02-024438.png"></p></li></ol><h2 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h2><p>栗子🌰：</p><p>[\033[1;31m]</p><ul><li>底线：ANSI 色彩控制语法。\033 声明了转义序列的开始，然后是 [ 开始定义颜色。</li><li>第一组数字：亮度 (普通0, 高亮度1, 闪烁2)。</li><li>第二组数字：顏色代码。</li><li>颜色: 30&#x3D;black 31&#x3D;red 32&#x3D;green 33&#x3D;yellow 34&#x3D;blue 35&#x3D;magenta 36&#x3D;cyan 37&#x3D;white</li></ul><p>显示内容配置：</p><ul><li>\a     ASCII响铃字符 (07)</li><li>\d     “周 月 日”格式的日期</li><li>\D{format}   参数format被传递给strftime(3)来构造自定格式的时间并插入提示符中；该参数为空时根据本地化设置自动生成格式。</li><li>\e     ASCII转义字符（ESC) (033)</li><li>\h     主机名在第一个点号前的内容</li><li>\H     完全主机名</li><li>\j     shell当前管理的任务数</li><li>\l     shell终端设备的基本名称</li><li>\n     新行</li><li>\r     回车</li><li>\s     shell的名称，$0的基本名称</li><li>\t     当前时间（24小时） HH:MM:SS</li><li>\T     当前时间（12小时） HH:MM:SS</li><li>@     当前时间（12小时） am&#x2F;pm</li><li>\A     当前时间（24小时） HH:MM</li><li>\u     当前用户名称</li><li>\v     bash版本(如”2.00″)</li><li>\V     bash版本+补丁号(如”2.00.0″)</li><li>\w     当前工作目录</li><li>\W     当前工作目录的基本名称</li><li>!     该命令的历史数（在历史文件中的位置）</li><li>#     该命令的命令数（当前shell中执行的序列位置）</li><li>$     根用户为”#”，其它用户为”$”</li><li>\nnn   8进制数</li><li>\     反斜杠</li><li>[     表示跟在后面的是非打印字符，可用于shell的颜色控制</li><li>]     表示非打印字符结束</li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> terminal </tag>
            
            <tag> 主题美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的基本命令学习</title>
      <link href="/2017/12/31/git-cmd/"/>
      <url>/2017/12/31/git-cmd/</url>
      
        <content type="html"><![CDATA[<h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>在MacOS上安装x-code</p><p>打开terminal，输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><p>跳出安装对话框，按照提示正常安装即可。</p><h2 id="安装后设置git"><a href="#安装后设置git" class="headerlink" title="安装后设置git"></a>安装后设置git</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span><br></pre></td></tr></table></figure><p>git config —global 用了这个参数，表示这台机器上所有的git仓库都是用这个配置。</p><p>创建一个learngit文件夹，作为git的本地仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> learngit</span><br><span class="line">$ <span class="built_in">cd</span> learngit/</span><br><span class="line">$ <span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><p>进入文件夹，初始化仓库 git init 命令</p><p>添加文件到Git仓库，分成两步</p><pre><code>1.  使用git add &lt;file&gt;命令，可反复多次使用 2.  使用git commit -m “ 注释”，完成</code></pre><p>   ps：可以反复多次使用add来进行添加文件，可以使用commit一次性的完成</p><p>运行git status查看当前仓库的状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">modified:   readme.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br></pre></td></tr></table></figure><p>git diff查看文件和上次的不同之处</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git diff readme.txt </span><br><span class="line">diff --git a/readme.txt b/readme.txt</span><br><span class="line">index e543f0d..ccb61d4 100644</span><br><span class="line">--- a/readme.txt</span><br><span class="line">+++ b/readme.txt</span><br><span class="line">@@ -1,2 +1,2 @@</span><br><span class="line">-git is a version control system</span><br><span class="line">+git is a distributed version control system</span><br><span class="line"> git is free software</span><br><span class="line">\ No newline at end of file</span><br></pre></td></tr></table></figure><p>Git log命令显示从最近到最远的提交日志，如果输出内容太多，可以加上—pretty&#x3D;oneline</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit 7d86d5406ebe1c432337fe58f76367c6382b2d9c (HEAD -&gt; master)</span><br><span class="line">Author: carolyn-Kim &lt;983110946@qq.com&gt;</span><br><span class="line">Date:   Thu Dec 28 19:23:23 2017 +0800</span><br><span class="line"></span><br><span class="line">    append GPL</span><br><span class="line"></span><br><span class="line">commit 7b08c0ab8f9f59e8bf9a1ce5217a2f196bdb6927</span><br><span class="line">Author: carolyn-Kim &lt;983110946@qq.com&gt;</span><br><span class="line">Date:   Thu Dec 28 17:53:01 2017 +0800</span><br><span class="line"></span><br><span class="line">    second update file</span><br><span class="line"></span><br><span class="line">commit 18d55653ef14cbe54d354e36f210baede4aeea03</span><br><span class="line">Author: carolyn-Kim &lt;983110946@qq.com&gt;</span><br><span class="line">Date:   Thu Dec 28 17:43:57 2017 +0800</span><br><span class="line"></span><br><span class="line">    wrote a readme file</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">$ git <span class="built_in">log</span> --pretty=oneline</span><br><span class="line">7d86d5406ebe1c432337fe58f76367c6382b2d9c (HEAD -&gt; master) append GPL</span><br><span class="line">7b08c0ab8f9f59e8bf9a1ce5217a2f196bdb6927 second update file</span><br><span class="line">18d55653ef14cbe54d354e36f210baede4aeea03 wrote a readme file</span><br></pre></td></tr></table></figure><p>其中的一大串为commit id【7d86d5406ebe1c432337fe58f76367c6382b2d9c】（版本号），通过sha1计算出来的16进制数。</p><h2 id="退回版本"><a href="#退回版本" class="headerlink" title="退回版本"></a>退回版本</h2><p>git中，HEAD表示当前的版本号，当前最新的一个版本</p><p>上一个版本为 HEAD^ ，上上一个版本为HEAD^^ ,上上100个版本为HEAD-100</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br><span class="line">HEAD is now at 7b08c0a second update file</span><br></pre></td></tr></table></figure><p>找到未来的某个版本，如果命令行没有关掉的话，找到之前的commit id（7d86d5406）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard 7d86d5406</span><br><span class="line">HEAD is now at 7d86d54 append GPL</span><br></pre></td></tr></table></figure><p><code>git reflog</code>查看命令历史，用来记录你的每一次命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">7d86d54 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to 7d86d54</span><br><span class="line">7b08c0a HEAD@&#123;1&#125;: reset: moving to HEAD^</span><br><span class="line">7d86d54 (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: append GPL</span><br><span class="line">7b08c0a HEAD@&#123;3&#125;: commit: second update file</span><br><span class="line">18d5565 HEAD@&#123;4&#125;: commit (initial): wrote a readme file</span><br></pre></td></tr></table></figure><p><img src="http://kim.jtsmart-ai.com/mdpic/2017-12-29-070411.jpg" alt="stage"></p><p>用git diff HEAD — readme.txt  查看工作区和版本库里面最新的内容</p><h2 id="退回"><a href="#退回" class="headerlink" title="退回"></a>退回</h2><p>乱改了工作区某个文件的内容，想直接丢弃工作区修改的内容时，应该使用git checkout –file</p><p>乱改了工作区的某个文件，并且已经存放到了stage中，想要丢弃修改，分成两步</p><ol><li>git reset HEAD file</li><li>git checkout — file</li></ol><p>已经提交了不适当的修改到版本库中，想要撤销，应该使用</p><p>git reset HEAD^</p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>删除本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">rm</span> test.txt</span><br></pre></td></tr></table></figure><p>删除版本库内</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">rm</span> test.txt</span><br><span class="line"><span class="built_in">rm</span> <span class="string">&#x27;test.txt&#x27;</span></span><br><span class="line">$ git commit -m <span class="string">&quot;remove test.txt&quot;</span></span><br><span class="line">[master d17efd8] remove test.txt</span><br><span class="line"> 1 file changed, 1 deletion(-)</span><br><span class="line"> delete mode 100644 test.txt</span><br></pre></td></tr></table></figure><p>如果只是删除了本地文件，版本库中还存在的话。</p><p>可以使用</p><p>git checkout — file 来还原已经删除的文件</p><p>但是，只能恢复文件到最新版本库的文件，会丢失最近一次提交后你修改的内容。</p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><ol><li><p>创建ssh key 。在用户主目录下，看看有没有.ssh目录。如果有，是否有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件。如果有，跳到下一步。没有的话，打开terminal，创建ssh key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;youremail@example.com&quot;</span></span><br></pre></td></tr></table></figure><p>需要把邮件地址换证自己的邮件地址，然后一路回车，使用默认值。因不是用于军事目的，所以也无需设置密码。</p><p>如果正常执行，会在用户目录下有.ssh目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件</p><p>其中id_rsa是私钥，id_rsa.pub是公钥，可以告诉任何人。</p><p>在mac中，可以使用terminal输入<code>$ open ~/.ssh</code>来查看两个文件</p></li><li><p>登陆github，打开“settings”，“SSH and GPG keys”页面，点击“add ssh key”，填上任意的title，在key的文本框里黏贴之前id_rsa.pub的文件内容</p></li><li><p>为什么需要ssh key 。因为github要识别出你推送的提交确实是你推送的，而不是人家冒充的，git支持ssh协议，所以github只要知道了你的公钥，就可以确认只有你自己才能推送</p></li><li><p>github支持添加多个sshkey，只需要把每台sshkey都添加到github上吗就可以每天电脑都进行推送。</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2017-12-29-070443.jpg" alt="sshkey"></p><p>​</p></li></ol><p>创建一个空的repository，根据提示，在本地的<code>learngit</code>仓库下运行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:username/learngit.git</span><br></pre></td></tr></table></figure><p>添加后，远程库的名字就叫做origin，这是git的默认叫法。</p><p>下一步，就把本地库的东西推送到远程库上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br><span class="line">Counting objects: 19, <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (19/19), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (19/19), 13.73 KiB, <span class="keyword">done</span>.</span><br><span class="line">Total 23 (delta 6), reused 0 (delta 0)</span><br><span class="line">To git@github.com:michaelliao/learngit.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line">Branch master <span class="built_in">set</span> up to track remote branch master from origin.</span><br></pre></td></tr></table></figure><p>就是把当前分支<code>master</code>推送到远程</p><p>由于远程repository是空的，所以第一次推送<code>master</code>的时候要加上<code>-u</code>参数。git不但会吧本地的<code>master</code>分支推送到远程新的<code>master</code>分支，还会把本地的和远程的关联起来，这样以后的推送或者拉取就可以简化命令。</p><p>此后，只要本地做了提交，就可以通过命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><p>来进行把本地的<code>master</code>分支的最新修改推送到github上。</p><h2 id="ssh警告"><a href="#ssh警告" class="headerlink" title="ssh警告"></a>ssh警告</h2><p>当第一次使用clone或者push命令链接的时候，会有一个警告，因为使用ssh链接，确认github的key的指纹信息是否真的饿来自github的服务器，输入yes就行。</p><p>警告只会出现一次。</p><h2 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h2><p>通过<code>git clone</code>命令来进行克隆</p><p>支持多种协议，https，ssh。通过ssh支持的原声git协议速度最快。</p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>查看分支 <code>git branch</code></p><p>创建分支<code>git branch &lt;name&gt;</code>   </p><p>切换分支<code>git checkout &lt;name&gt;</code></p><p>创建+切换分支 <code>git checkout -b &lt;name&gt;</code></p><p>合并某分支到当前分支<code>git merge &lt;name&gt;</code></p><p>删除分支 <code>git branch -d &lt;name&gt;</code></p><h2 id="分支冲突"><a href="#分支冲突" class="headerlink" title="分支冲突"></a>分支冲突</h2><p>分支冲突时，无法自动合并分支。先解决分支冲突，再提交，合并。</p><p>可以用以下命令查看分支合并图</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --graph --pretty=onelin --abbrev-commit</span><br><span class="line">*   9b92e16 (HEAD -&gt; master) and simple</span><br><span class="line">|\  </span><br><span class="line">| * f7e3407 (feature1) AND simple</span><br><span class="line">* | 26c92e6 &amp; simple</span><br><span class="line">|/  </span><br><span class="line">* 02d0a26 branch <span class="built_in">test</span></span><br><span class="line">* 58fc18a (origin/master, origin/HEAD) Initial commit</span><br></pre></td></tr></table></figure><p>合并分支时，加上<code>—no-f</code>参数就可以用普通模式合并，合并后的历史有分支，而<code>fast forward</code>合并就看不出来曾经做过合并。</p><h2 id="bug分支"><a href="#bug分支" class="headerlink" title="bug分支"></a>bug分支</h2><p>当接到一个bug要修复，但是正在dev上面进行的工作无法提交，但是必须先修复bug再工作。这个时候就使用到了stash功能，把正在工作的现场隐藏起来，等bug修复好，在恢复现场。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git stash</span><br><span class="line">Saved working directory and index state WIP on dev: 6224937 add merge</span><br><span class="line">HEAD is now at 6224937 add merge</span><br></pre></td></tr></table></figure><p>现在，用<code>git status</code>查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。</p><ol><li><p>确定在哪个分支上修复bug，就在哪个分支上创建临时的分支</p></li><li><p>在临时分支上修复bug，在提交到版本库</p></li><li><p>修复完成之后，切换到step1上的那个分支上，进行合并。git merge</p></li><li><p>删除临时分支</p></li><li><p>回到之前干活的分支上</p></li><li><p>用<code>git stash list</code>命令进行查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on dev: 6224937 add merge</span><br></pre></td></tr></table></figure></li><li><p>一般使用<code>git stash apply</code>恢复，但是恢复后，stash内容并不删除，需要使用<code>git stash drop</code>来删除（或者使用 <code>git stash pop</code> 命令，恢复的同时并且把stash的内容也删除了。</p><p>​</p></li></ol><h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d feature-vulcan</span><br><span class="line">error: The branch <span class="string">&#x27;feature-vulcan&#x27;</span> is not fully merged.</span><br><span class="line">If you are sure you want to delete it, run <span class="string">&#x27;git branch -D feature-vulcan&#x27;</span>.</span><br></pre></td></tr></table></figure><p>没有合并的分支没有办法被删除，只能强行删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -D feature-vulcan</span><br><span class="line">Deleted branch feature-vulcan (was 756d4af).</span><br></pre></td></tr></table></figure><h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><ul><li><p>查看远程库信息，使用<code>git remote -v</code>；</p></li><li><p>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</p></li><li><p>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</p></li><li><p>如果<code>git pull</code>提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，则需要建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</p></li><li><p>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</p><p>​</p></li></ul><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><ol><li><p>命令<code>git tag &lt;name&gt;</code>就可以打一个新标签</p></li><li><p>用命令<code>git tag</code>查看所有标签</p></li><li><p><code>$ git tag v0.9 6224937</code>可以用commit id来设置tag</p></li><li><p>用<code>git show &lt;tagname&gt;</code>查看标签信息</p></li><li><p>可以创建带有说明的标签，用<code>-a</code>指定标签名，<code>-m</code>指定说明文字</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v0.1 -m <span class="string">&quot;version 0.1 released&quot;</span> 3628164</span><br><span class="line"></span><br><span class="line">$ git show v0.1</span><br><span class="line">tag v0.1</span><br><span class="line">Tagger: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Mon Aug 26 07:28:11 2013 +0800</span><br><span class="line"></span><br><span class="line">version 0.1 released</span><br><span class="line"></span><br><span class="line">commit 3628164fb26d48395383f8f31179f24e0882e1e0</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Tue Aug 20 15:11:49 2013 +0800</span><br><span class="line"></span><br><span class="line">    append GPL</span><br></pre></td></tr></table></figure></li><li><p>用<code>$ git tag -d &lt;tagname&gt;</code>删除本地标签</p></li><li><p>推送某个标签到远程，使用命令<code>git push origin &lt;tagname&gt;</code></p></li><li><p>一次性推送全部尚未推送到远程的本地标签，使用命令<code>git push origin —tags</code></p></li><li><p>删除远程标签：先本地删除：<code>$ git tag -d &lt;tagname&gt;</code> 然后远程删除<code>$ git push origin :refs/tags/&lt;tagname&gt;</code></p><p>​</p></li></ol><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><ul><li><p>忽略某些文件时，需要编写<code>.gitignore</code>；</p></li><li><p><code>.gitignore</code>文件本身要放到版本库里，并且可以对<code>.gitignore</code>做版本管理！</p><p>​</p></li></ul><h2 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global alias.st status</span><br></pre></td></tr></table></figure><p>git status&#x3D;git st</p><p>一些配置的栗子🌰：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global alias.co checkout</span><br><span class="line">$ git config --global alias.ci commit</span><br><span class="line">$ git config --global alias.br branch</span><br><span class="line"></span><br><span class="line">$ git config --global alias.unstage <span class="string">&#x27;reset HEAD&#x27;</span></span><br><span class="line"></span><br><span class="line">$ git config --global alias.last <span class="string">&#x27;log -1&#x27;</span></span><br><span class="line"></span><br><span class="line">$ git config --global alias.lg <span class="string">&quot;log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit&quot;</span></span><br></pre></td></tr></table></figure><p>配置Git的时候，加上<code>--global</code>是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。</p><p>每个仓库的Git配置文件都放在<code>.git/config</code>文件中</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> git命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shadowsocks &amp; Kcptun 配置</title>
      <link href="/2017/12/31/Shadowsocks/"/>
      <url>/2017/12/31/Shadowsocks/</url>
      
        <content type="html"><![CDATA[<h2 id="Shadowsocks-Kcptun"><a href="#Shadowsocks-Kcptun" class="headerlink" title="Shadowsocks &amp; Kcptun"></a>Shadowsocks &amp; Kcptun</h2><blockquote><p>因为搭的时候费了挺大劲的，记录一下自己搭的过程，和一些有问题的地方。</p></blockquote><h2 id="购买vps"><a href="#购买vps" class="headerlink" title="购买vps"></a>购买vps</h2><p>在网上找到了老高的技术博客（<a href="https://blog.phpgao.com/hostmybytes.html%EF%BC%89%EF%BC%8C%E6%8C%89%E7%85%A7%E8%80%81%E9%AB%98%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%8E%A8%E8%8D%90%EF%BC%8C%E5%AE%8C%E6%88%90%E5%9C%A8HostMyBytes%E4%B9%B0%E4%BA%86%E4%B8%80%E5%8F%B0$8-768MB%E7%9A%84vps%E3%80%82%E8%80%81%E9%AB%98%E7%9A%84%E9%87%8C%E9%9D%A2%E8%BF%98%E6%9C%89%E5%BE%88%E5%A4%9A%E6%95%99%E5%AF%BC%E7%BF%BB%E5%A2%99%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E9%82%A3%E9%87%8C%EF%BC%8C%E6%88%91%E8%BF%99%E9%87%8C%E5%8F%AA%E6%98%AF%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E7%9A%84%E8%BF%87%E7%A8%8B%E5%92%8C%E6%88%91%E8%87%AA%E5%B7%B1%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%E3%80%82">https://blog.phpgao.com/hostmybytes.html），按照老高的博客推荐，完成在HostMyBytes买了一台$8-768MB的vps。老高的里面还有很多教导翻墙的博客，可以看那里，我这里只是记录自己搭建的过程和我自己遇到的坑。</a></p><p>购买的时候系统选择centos7-minimal，勾选上附加功能。具体如何购买参照老高的技术博客，分分钟购买成功。</p><h2 id="安装ss和kcp"><a href="#安装ss和kcp" class="headerlink" title="安装ss和kcp"></a>安装ss和kcp</h2><p>购买成功后，ssh到你的服务器中。安装shadowsocks，如果服务器系统是centos7 可以使用老高的<a href="https://blog.phpgao.com/auto_install_shadowsocks_and_kcptun.html">centos7 一键安装 shadowsocks</a></p><p>具体实现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://st.im/meDx)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"></span><br><span class="line">sudo sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://st.im/meDx)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>安装成功后可以查看ss配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /etc/ss-config</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看kcptum配置</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> /etc/kcp-config</span><br></pre></td></tr></table></figure><p>如果要修改json配置，修改之后要重启服务才会生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启ss服务</span></span><br><span class="line">systemctl restart shadowsocks-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启kcptun服务</span></span><br><span class="line">systemctl restart kcp-server</span><br></pre></td></tr></table></figure><p>这样ss服务器端就算安装完毕</p><h2 id="配置客户端ss"><a href="#配置客户端ss" class="headerlink" title="配置客户端ss"></a>配置客户端ss</h2><p>安装ss客户端（<a href="https://github.com/shadowsocks/ShadowsocksX-NG/releases">mac安装包</a>），成功之后</p><p>点击服务器配置</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2017-12-30-051020.png"></p><p>按照之前查看的ss-config 按照提示选择相对应的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;server_port&quot;</span><span class="punctuation">:</span><span class="number">46019</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;password&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;timeout&quot;</span><span class="punctuation">:</span><span class="number">60</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;method&quot;</span><span class="punctuation">:</span><span class="string">&quot;rc4-md5&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="http://kim.jtsmart-ai.com/mdpic/2017-12-30-051226.png"></p><p>【地址】：你的vps ip地址</p><p>【:8379】：自己的server_prot</p><p>【密码】：password</p><p>【加密方法】：method</p><p>填写之后确定，并且打开shadowsocks。</p><p>然后打开浏览器，访问谷歌</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2017-12-30-051845.png"></p><p>访问成功。</p><h2 id="kcptun配置"><a href="#kcptun配置" class="headerlink" title="kcptun配置"></a>kcptun配置</h2><p>在服务器端运行以下命令下载，并且解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> ~/kcptun &amp;&amp; <span class="built_in">cd</span> ~/kcptun</span><br><span class="line"></span><br><span class="line">$ wget https://github.com/xtaci/kcptun/releases/download/v20161202/kcptun-linux-amd64-20161202.tar.gz</span><br><span class="line"></span><br><span class="line">$ tar zxf kcptun-linux-amd64-20161202.tar.gz &amp;&amp; <span class="built_in">rm</span> kcptun-linux-amd64-20161202.tar.gz</span><br></pre></td></tr></table></figure><p>之后会得到两个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜ <span class="built_in">ls</span></span><br><span class="line">client_linux_amd64  server_linux_amd64</span><br></pre></td></tr></table></figure><p>服务器端执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">./server_linux_amd64 -c /etc/kcp-config.json</span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以使用</span></span><br><span class="line">./server_linux_amd64 -t 127.0.0.1:46019 -l :49033 --key mykey --crypt aes-192 --mode fast2</span><br><span class="line"></span><br><span class="line"><span class="comment">#参数说明--按照kcp-config的内容填写</span></span><br><span class="line">-t 127.0.0.1:9000  指向本机Shadowsocks的服务端口，本例中是46019</span><br><span class="line">-l :29900          KCPTun服务端端口，这个值在下一节KCPTunGUI设置中需要用到</span><br><span class="line">--key mykey        KCPTun服务端与客户端连接用的secret key</span><br><span class="line">--crypt aes-128    KCPTun服务端与客户端通信时使用aes-128加密（不必须，基于安全性的考虑推荐使用）</span><br><span class="line">--mode fast2       KCPTun服务端与客户端数据传输模式。</span><br></pre></td></tr></table></figure><p>设置开机启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> /etc/init.d/kcptun</span><br><span class="line"><span class="built_in">chmod</span> +x /etc/init.d/kcptun</span><br><span class="line">vim /etc/init.d/kcptun</span><br></pre></td></tr></table></figure><p>然后在&#x2F;etc&#x2F;init.d&#x2F;kcptun文件中写入以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># KCPTun       Startup script for the KCPTun Server</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># chkconfig: - 90 10</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># description: The KCPTun is a secure tunnel based On KCP with N:M Multiplexing. \</span></span><br><span class="line"><span class="comment">#              (https://github.com/xtaci/kcptun)</span></span><br><span class="line"><span class="comment"># processname: kcptun</span></span><br><span class="line"><span class="comment"># config: /etc/sysconfig/kcptun</span></span><br><span class="line"><span class="comment"># pidfile: /var/run/kcptun.pid</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"></span><br><span class="line"><span class="comment">### BEGIN INIT INFO</span></span><br><span class="line"><span class="comment"># Provides: KCPTun</span></span><br><span class="line"><span class="comment"># Required-Start: $network $syslog $local_fs $remote_fs $named</span></span><br><span class="line"><span class="comment"># Required-Stop: $network $local_fs $remote_fs </span></span><br><span class="line"><span class="comment"># Should-Start: </span></span><br><span class="line"><span class="comment"># Should-Stop:        </span></span><br><span class="line"><span class="comment"># Default-Start:      </span></span><br><span class="line"><span class="comment"># Default-Stop:  </span></span><br><span class="line"><span class="comment"># Short-Description: Start and stop KCPTun Server</span></span><br><span class="line"><span class="comment"># Description: The KCPTun is a secure tunnel based On KCP with N:M Multiplexing.</span></span><br><span class="line"><span class="comment">### END INIT INFO</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Author: farawayzheng &lt;http://blog.csdn.net/farawayzheng_necas&gt;</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># To install:</span></span><br><span class="line"><span class="comment">#   Copy this file to /etc/rc.d/init.d/kcptun</span></span><br><span class="line"><span class="comment">#   $ chkconfig --add kcptun</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># To uninstall:</span></span><br><span class="line"><span class="comment">#   $ chkconfig --del kcptun</span></span><br><span class="line"><span class="comment">#   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin:/opt/bin:</span></span><br><span class="line"></span><br><span class="line">BASE=$(<span class="built_in">basename</span> <span class="variable">$0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># modify these in /etc/sysconfig/$BASE (/etc/sysconfig/kcptun)</span></span><br><span class="line">KCPTUN=~/kcptun/server_linux_amd64</span><br><span class="line"></span><br><span class="line">KCPTUN_PIDFILE=/var/run/<span class="variable">$BASE</span>.pid</span><br><span class="line">KCPTUN_LOGFILE=/var/log/<span class="variable">$BASE</span>.<span class="built_in">log</span></span><br><span class="line">KCPTUN_LOCKFILE=/var/lock/subsys/<span class="variable">$BASE</span></span><br><span class="line">KCPTUN_OPTS=<span class="string">&quot;-t IP地址:46019 -l :49033 --key mykey --crypt aes-192 --mode fast2&quot;</span></span><br><span class="line">KCPTUN_DESC=<span class="string">&quot;KCPTUN&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source function library.</span></span><br><span class="line">. /etc/rc.d/init.d/functions</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f /etc/sysconfig/<span class="variable">$BASE</span> ]; <span class="keyword">then</span></span><br><span class="line">    . /etc/sysconfig/<span class="variable">$BASE</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Check kcptun server is present</span></span><br><span class="line"><span class="keyword">if</span> [ ! -x <span class="variable">$KCPTUN</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$KCPTUN</span> not present or not executable!&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">RETVAL=0</span><br><span class="line">STOP_TIMEOUT=<span class="variable">$&#123;STOP_TIMEOUT-10&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="variable">$&#123;KCPTUN_LOCKFILE&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> [ -s <span class="variable">$&#123;KCPTUN_PIDFILE&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$BASE</span> might be still running, stop it first!&quot;</span></span><br><span class="line">            killproc -p <span class="variable">$&#123;KCPTUN_PIDFILE&#125;</span> -d <span class="variable">$&#123;STOP_TIMEOUT&#125;</span> <span class="variable">$KCPTUN</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$BASE</span> was not shut down correctly!&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">rm</span> -f <span class="variable">$&#123;KCPTUN_PIDFILE&#125;</span> <span class="variable">$&#123;KCPTUN_LOCKFILE&#125;</span></span><br><span class="line">        <span class="built_in">sleep</span> 2</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">&quot;Starting <span class="variable">$BASE</span>: &quot;</span></span><br><span class="line">    <span class="variable">$KCPTUN</span> --<span class="built_in">log</span> <span class="variable">$&#123;KCPTUN_LOGFILE&#125;</span> <span class="variable">$KCPTUN_OPTS</span> &amp;</span><br><span class="line">    RETVAL=$?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$RETVAL</span>&quot;</span> = <span class="string">&quot;0&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        success</span><br><span class="line">        <span class="built_in">sleep</span> 2</span><br><span class="line">        ps -A o pid,cmd | grep <span class="string">&quot;<span class="variable">$KCPTUN</span> --log <span class="variable">$&#123;KCPTUN_LOGFILE&#125;</span> <span class="variable">$KCPTUN_OPTS</span>&quot;</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | <span class="built_in">head</span> -n 1 &gt; <span class="variable">$&#123;KCPTUN_PIDFILE&#125;</span> </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        failure</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line">    [ <span class="variable">$RETVAL</span> = 0 ] &amp;&amp; <span class="built_in">touch</span> <span class="variable">$&#123;KCPTUN_LOCKFILE&#125;</span></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$RETVAL</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">&quot;Stopping <span class="variable">$BASE</span>: &quot;</span></span><br><span class="line">    killproc -p <span class="variable">$&#123;KCPTUN_PIDFILE&#125;</span> -d <span class="variable">$&#123;STOP_TIMEOUT&#125;</span> <span class="variable">$KCPTUN</span></span><br><span class="line">    RETVAL=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    [ <span class="variable">$RETVAL</span> = 0 ] &amp;&amp; <span class="built_in">rm</span> -f <span class="variable">$&#123;KCPTUN_PIDFILE&#125;</span> <span class="variable">$&#123;KCPTUN_LOCKFILE&#125;</span></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$RETVAL</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">  start)</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">  stop)</span><br><span class="line">        stop</span><br><span class="line">        ;;</span><br><span class="line">  status)</span><br><span class="line">        status -p <span class="variable">$&#123;KCPTUN_PIDFILE&#125;</span> <span class="variable">$KCPTUN</span></span><br><span class="line">        RETVAL=$?</span><br><span class="line">        ;;</span><br><span class="line">  restart)</span><br><span class="line">        stop</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">  *)</span><br><span class="line">        <span class="built_in">echo</span> $<span class="string">&quot;Usage: <span class="variable">$BASE</span> &#123; start | stop | restart | status &#125;&quot;</span></span><br><span class="line">        RETVAL=2</span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> <span class="variable">$RETVAL</span></span><br></pre></td></tr></table></figure><blockquote><p>脚本中的KCPTUN地址要改成自己之前解压server_linux_amd64d的地址</p><p>脚本中的KCPTUN_OPTS&#x3D;”-t IP地址:46019 -l :49033 –key mykey –crypt aes-192 –mode fast2”也要改成自己的内容</p></blockquote><p>改好之后运行以下命令激活开机气孔</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chkconfig --add kcptun</span><br><span class="line">$ chkconfig kcptun on</span><br></pre></td></tr></table></figure><p>启动kcptun</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo service kcptun start</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看ccptun是否启动了</span></span><br><span class="line"><span class="comment"># ps aux | grep server_linux_amd64</span></span><br><span class="line">root      4181  1.6  0.6  16452  5232 ?        Sl   11:50   1:42 /root/kcptun/server_linux_amd64 --<span class="built_in">log</span> /var/log/kcptun.log -t 167.88.170.18</span><br><span class="line">5:46019 -l :49033 --key YWRlZjUzODdl --crypt aes-192 --mode fast2</span><br><span class="line"></span><br><span class="line"><span class="comment">#当然 service kcptun stop 是停止</span></span><br><span class="line"><span class="comment">#service kcptun restart 是重新启动----具体看上面文件的命令</span></span><br></pre></td></tr></table></figure><blockquote><p>如果有&#x2F;root&#x2F;kcptun&#x2F;server_linux_amd64 –log &#x2F;var&#x2F;log&#x2F;kcptun.log -t 167.88.170.18则说明kcptun进程正常启动。</p><p>这部分可以参考这个博客（<a href="http://blog.csdn.net/farawayzheng_necas/article/details/63255799%EF%BC%89">http://blog.csdn.net/farawayzheng_necas/article/details/63255799）</a></p></blockquote><p>至此，服务器端的kcptun就安装完毕。</p><h2 id="客户端kcptun安装配置"><a href="#客户端kcptun安装配置" class="headerlink" title="客户端kcptun安装配置"></a>客户端kcptun安装配置</h2><hr><blockquote><p>此处是mac系统</p><p>之前我找到了一个GUI的客户端界面，但是老是有问题，闪退等等。最终用的是terminal命令启动的服务</p><p>这里附上GUI客户端界面下载地址（<a href="https://github.com/dfdragon/kcptun_xclient/releases%EF%BC%89%EF%BC%8C%E5%A6%82%E6%9C%89%E9%97%AE%E9%A2%98%E5%8F%AF%E4%BB%A5%E5%9C%A8issues%E9%87%8C%E9%9D%A2%E7%9C%8B%E7%9C%8B%E6%9C%89%E6%B2%A1%E6%9C%89%E5%9B%9E%E5%A4%8D">https://github.com/dfdragon/kcptun_xclient/releases），如有问题可以在issues里面看看有没有回复</a></p></blockquote><ol><li><p>安装相对应的kcptun（<a href="https://github.com/xtaci/kcptun/releases/%EF%BC%89">https://github.com/xtaci/kcptun/releases/）</a></p></li><li><p>我选择了<a href="https://github.com/xtaci/kcptun/releases/download/v20171201/kcptun-darwin-amd64-20171201.tar.gz"><strong>kcptun-darwin-amd64-20171201.tar.gz</strong></a> 下载并且解压，依然的到两个文件</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2017-12-30-054726.png"></p><p>之后配置一个在文件夹中配置一个config.json文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;localaddr&quot;</span>: <span class="string">&quot;:12948&quot;</span>,<span class="comment">#自己定义的监听端口</span></span><br><span class="line">    <span class="string">&quot;remoteaddr&quot;</span>: <span class="string">&quot;IPaddr:49033&quot;</span>, <span class="comment">#listen端口</span></span><br><span class="line">    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;key&quot;</span>,</span><br><span class="line">    <span class="string">&quot;crypt&quot;</span>: <span class="string">&quot;aes-192&quot;</span>, <span class="comment">#kcp服务端的config</span></span><br><span class="line">    <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;fast2&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置好之后,terminal进入相对应的文件夹内，运行</span></span><br><span class="line">$ ./client_darwin_amd64 -c config.json</span><br><span class="line"></span><br><span class="line"><span class="comment">#得到如下</span></span><br></pre></td></tr></table></figure><p>​</p></li></ol><p><img src="http://kim.jtsmart-ai.com/mdpic/2017-12-30-055314.png"></p><p>之后在ss中配置</p><p>添加一个新的服务器，按照如下填写</p><p><img src="http://kim.jtsmart-ai.com/mdpic/2017-12-30-055453.png"></p><p>地址：127.0.0.1</p><p>端口：之前kcp定义的端口，这里是12948</p><p>加密方式和密码：都是之前ss配置时候的信息。</p><p>之后选取127.0.0.1服务器就可以啦～～～！！🎉🎉🎉🎉🎉</p><blockquote><p>遇到的小问题</p><ol><li><p>在terminal中不小心退出了kcp，之后运行.&#x2F;client_darwin_amd64 -c config.json会提示listen tcp :12948: bind: address already in use</p><p>答：ps -ef | grep client_darwin_amd64 | grep -v grep | awk ‘{print $2}’</p><p>​获取pid，关闭对应的pid</p><p>​kill -9 pid</p><p>​这样之后再次执行，胡汉三就又回来了啊！！！！</p></li><li><p>有的命令按照上述所写无效的话，可以用用sudo执行试试！</p><p>​</p></li></ol><p></p></blockquote><blockquote><p>一些参考博客</p><p>老高的技术博客：<a href="https://blog.phpgao.com/hostmybytes.html">https://blog.phpgao.com/hostmybytes.html</a></p><p>Leonn 的博客：<a href="https://liyuans.com/archives/kcptun-server-configuration-tutorial.html">https://liyuans.com/archives/kcptun-server-configuration-tutorial.html</a></p><p>复杂的教程，不过很详细：<a href="https://blog.kuoruan.com/110.html">https://blog.kuoruan.com/110.html</a></p><p><a href="http://blog.csdn.net/jhfsdfs/article/details/60977025">http://blog.csdn.net/jhfsdfs/article/details/60977025</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ss </tag>
            
            <tag> shadowsocks </tag>
            
            <tag> kcptun </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
